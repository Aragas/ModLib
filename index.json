{
  "api/BUTR.DependencyInjection.Extensions.html": {
    "href": "api/BUTR.DependencyInjection.Extensions.html",
    "title": "Namespace BUTR.DependencyInjection.Extensions | MCM Documentation",
    "keywords": "Namespace BUTR.DependencyInjection.Extensions Classes ServiceCollectionExtensions"
  },
  "api/BUTR.DependencyInjection.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/BUTR.DependencyInjection.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | MCM Documentation",
    "keywords": "Class ServiceCollectionExtensions Inheritance Object ServiceCollectionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : BUTR.DependencyInjection.Extensions Assembly : MCMv4.dll Syntax public static class ServiceCollectionExtensions Methods AddScoped<TService>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddScoped<TService>(this IGenericServiceContainer services) where TService : class Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TService AddSingleton<TService, TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSingleton<TService, TImplementation>(this IGenericServiceContainer services) where TService : class where TImplementation : class, TService Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TService TImplementation AddTransient(IGenericServiceContainer, Type, Func<Object>) Declaration public static IGenericServiceContainer AddTransient(this IGenericServiceContainer services, Type serviceType, Func<object> factory) Parameters IGenericServiceContainer services Type serviceType Func < Object > factory Returns IGenericServiceContainer AddTransient(IGenericServiceContainer, Type, Type) Declaration public static IGenericServiceContainer AddTransient(this IGenericServiceContainer services, Type serviceType, Type implementationType) Parameters IGenericServiceContainer services Type serviceType Type implementationType Returns IGenericServiceContainer AddTransient<TService>(IGenericServiceContainer, Func<TService>) Declaration public static IGenericServiceContainer AddTransient<TService>(this IGenericServiceContainer services, Func<TService> factory) where TService : class Parameters IGenericServiceContainer services Func <TService> factory Returns IGenericServiceContainer Type Parameters TService AddTransient<TService, TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddTransient<TService, TImplementation>(this IGenericServiceContainer services) where TService : class where TImplementation : class, TService Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TService TImplementation GetServiceContainer(MBSubModuleBase) Declaration public static IGenericServiceContainer GetServiceContainer(this MBSubModuleBase _) Parameters MBSubModuleBase _ Returns IGenericServiceContainer"
  },
  "api/BUTR.DependencyInjection.GenericServiceProvider.html": {
    "href": "api/BUTR.DependencyInjection.GenericServiceProvider.html",
    "title": "Class GenericServiceProvider | MCM Documentation",
    "keywords": "Class GenericServiceProvider Inheritance Object GenericServiceProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : BUTR.DependencyInjection Assembly : MCMv4.dll Syntax public static class GenericServiceProvider Methods GetService<TService>() Declaration public static TService GetService<TService>() where TService : class Returns TService Type Parameters TService"
  },
  "api/BUTR.DependencyInjection.html": {
    "href": "api/BUTR.DependencyInjection.html",
    "title": "Namespace BUTR.DependencyInjection | MCM Documentation",
    "keywords": "Namespace BUTR.DependencyInjection Classes GenericServiceProvider WithHistoryGenericServiceContainer Interfaces IGenericServiceContainer IGenericServiceFactory IGenericServiceProvider"
  },
  "api/BUTR.DependencyInjection.IGenericServiceContainer.html": {
    "href": "api/BUTR.DependencyInjection.IGenericServiceContainer.html",
    "title": "Interface IGenericServiceContainer | MCM Documentation",
    "keywords": "Interface IGenericServiceContainer Namespace : BUTR.DependencyInjection Assembly : MCMv4.dll Syntax public interface IGenericServiceContainer Methods Build() Declaration IGenericServiceProvider Build() Returns IGenericServiceProvider RegisterScoped<TService>() Declaration IGenericServiceContainer RegisterScoped<TService>() where TService : class Returns IGenericServiceContainer Type Parameters TService RegisterScoped<TService>(Func<IGenericServiceFactory, TService>) Declaration IGenericServiceContainer RegisterScoped<TService>(Func<IGenericServiceFactory, TService> factory) where TService : class Parameters Func < IGenericServiceFactory , TService> factory Returns IGenericServiceContainer Type Parameters TService RegisterScoped<TService, TImplementation>() Declaration IGenericServiceContainer RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class, TService Returns IGenericServiceContainer Type Parameters TService TImplementation RegisterSingleton<TService>() Declaration IGenericServiceContainer RegisterSingleton<TService>() where TService : class Returns IGenericServiceContainer Type Parameters TService RegisterSingleton<TService>(Func<IGenericServiceFactory, TService>) Declaration IGenericServiceContainer RegisterSingleton<TService>(Func<IGenericServiceFactory, TService> factory) where TService : class Parameters Func < IGenericServiceFactory , TService> factory Returns IGenericServiceContainer Type Parameters TService RegisterSingleton<TService, TImplementation>() Declaration IGenericServiceContainer RegisterSingleton<TService, TImplementation>() where TService : class where TImplementation : class, TService Returns IGenericServiceContainer Type Parameters TService TImplementation RegisterTransient(Type, Func<Object>) Declaration IGenericServiceContainer RegisterTransient(Type serviceType, Func<object> factory) Parameters Type serviceType Func < Object > factory Returns IGenericServiceContainer RegisterTransient(Type, Type) Declaration IGenericServiceContainer RegisterTransient(Type serviceType, Type implementationType) Parameters Type serviceType Type implementationType Returns IGenericServiceContainer RegisterTransient<TService>() Declaration IGenericServiceContainer RegisterTransient<TService>() where TService : class Returns IGenericServiceContainer Type Parameters TService RegisterTransient<TService>(Func<TService>) Declaration IGenericServiceContainer RegisterTransient<TService>(Func<TService> factory) where TService : class Parameters Func <TService> factory Returns IGenericServiceContainer Type Parameters TService RegisterTransient<TService>(Func<IGenericServiceFactory, TService>) Declaration IGenericServiceContainer RegisterTransient<TService>(Func<IGenericServiceFactory, TService> factory) where TService : class Parameters Func < IGenericServiceFactory , TService> factory Returns IGenericServiceContainer Type Parameters TService RegisterTransient<TService, TImplementation>() Declaration IGenericServiceContainer RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class, TService Returns IGenericServiceContainer Type Parameters TService TImplementation Extension Methods ServiceCollectionExtensions.AddSettingsProvider<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsProvider<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsFormat<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsFormat<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsPropertyDiscoverer<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsPropertyDiscoverer<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsContainer<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsContainer<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsBuilderFactory<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSingleton<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddScoped<TService>(IGenericServiceContainer) ServiceCollectionExtensions.AddTransient<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddTransient(IGenericServiceContainer, Type, Type) ServiceCollectionExtensions.AddTransient<TService>(IGenericServiceContainer, Func<TService>) ServiceCollectionExtensions.AddTransient(IGenericServiceContainer, Type, Func<Object>)"
  },
  "api/BUTR.DependencyInjection.IGenericServiceFactory.html": {
    "href": "api/BUTR.DependencyInjection.IGenericServiceFactory.html",
    "title": "Interface IGenericServiceFactory | MCM Documentation",
    "keywords": "Interface IGenericServiceFactory Namespace : BUTR.DependencyInjection Assembly : MCMv4.dll Syntax public interface IGenericServiceFactory Methods GetService<TService>() Declaration TService GetService<TService>() where TService : class Returns TService Type Parameters TService"
  },
  "api/BUTR.DependencyInjection.IGenericServiceProvider.html": {
    "href": "api/BUTR.DependencyInjection.IGenericServiceProvider.html",
    "title": "Interface IGenericServiceProvider | MCM Documentation",
    "keywords": "Interface IGenericServiceProvider Namespace : BUTR.DependencyInjection Assembly : MCMv4.dll Syntax public interface IGenericServiceProvider Methods GetService<TService>() Declaration TService GetService<TService>() where TService : class Returns TService Type Parameters TService"
  },
  "api/BUTR.DependencyInjection.Logger.DefaultBUTRLogger.html": {
    "href": "api/BUTR.DependencyInjection.Logger.DefaultBUTRLogger.html",
    "title": "Class DefaultBUTRLogger | MCM Documentation",
    "keywords": "Class DefaultBUTRLogger Inheritance Object DefaultBUTRLogger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : BUTR.DependencyInjection.Logger Assembly : MCMv4.dll Syntax public class DefaultBUTRLogger : IBUTRLogger Methods LogMessage(LogLevel, String, Object[]) Declaration public void LogMessage(LogLevel logLevel, string message, params object[] args) Parameters LogLevel logLevel String message Object [] args Implements IBUTRLogger.LogMessage(LogLevel, String, Object[]) Extension Methods LoggerExtensions.LogDebug(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogDebug(IBUTRLogger, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, String, Object[])"
  },
  "api/BUTR.DependencyInjection.Logger.DefaultBUTRLogger-1.html": {
    "href": "api/BUTR.DependencyInjection.Logger.DefaultBUTRLogger-1.html",
    "title": "Class DefaultBUTRLogger<T> | MCM Documentation",
    "keywords": "Class DefaultBUTRLogger<T> Inheritance Object DefaultBUTRLogger<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : BUTR.DependencyInjection.Logger Assembly : MCMv4.dll Syntax public class DefaultBUTRLogger<T> : IBUTRLogger<T>, IBUTRLogger Type Parameters T Methods LogMessage(LogLevel, String, Object[]) Declaration public void LogMessage(LogLevel logLevel, string message, params object[] args) Parameters LogLevel logLevel String message Object [] args Implements IBUTRLogger.LogMessage(LogLevel, String, Object[]) Extension Methods LoggerExtensions.LogDebug(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogDebug(IBUTRLogger, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, String, Object[])"
  },
  "api/BUTR.DependencyInjection.Logger.html": {
    "href": "api/BUTR.DependencyInjection.Logger.html",
    "title": "Namespace BUTR.DependencyInjection.Logger | MCM Documentation",
    "keywords": "Namespace BUTR.DependencyInjection.Logger Classes DefaultBUTRLogger DefaultBUTRLogger<T> LoggerExtensions Interfaces IBUTRLogger IBUTRLogger<T> Enums LogLevel"
  },
  "api/BUTR.DependencyInjection.Logger.IBUTRLogger.html": {
    "href": "api/BUTR.DependencyInjection.Logger.IBUTRLogger.html",
    "title": "Interface IBUTRLogger | MCM Documentation",
    "keywords": "Interface IBUTRLogger Namespace : BUTR.DependencyInjection.Logger Assembly : MCMv4.dll Syntax public interface IBUTRLogger Methods LogMessage(LogLevel, String, Object[]) Declaration void LogMessage(LogLevel logLevel, string message, params object[] args) Parameters LogLevel logLevel String message Object [] args Extension Methods LoggerExtensions.LogDebug(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogDebug(IBUTRLogger, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, String, Object[])"
  },
  "api/BUTR.DependencyInjection.Logger.IBUTRLogger-1.html": {
    "href": "api/BUTR.DependencyInjection.Logger.IBUTRLogger-1.html",
    "title": "Interface IBUTRLogger<T> | MCM Documentation",
    "keywords": "Interface IBUTRLogger<T> Inherited Members IBUTRLogger.LogMessage(LogLevel, String, Object[]) Namespace : BUTR.DependencyInjection.Logger Assembly : MCMv4.dll Syntax public interface IBUTRLogger<T> : IBUTRLogger Type Parameters T Extension Methods LoggerExtensions.LogDebug(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogDebug(IBUTRLogger, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogTrace(IBUTRLogger, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogInformation(IBUTRLogger, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogWarning(IBUTRLogger, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogError(IBUTRLogger, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, Exception, String, Object[]) LoggerExtensions.LogCritical(IBUTRLogger, String, Object[])"
  },
  "api/BUTR.DependencyInjection.Logger.LoggerExtensions.html": {
    "href": "api/BUTR.DependencyInjection.Logger.LoggerExtensions.html",
    "title": "Class LoggerExtensions | MCM Documentation",
    "keywords": "Class LoggerExtensions Inheritance Object LoggerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : BUTR.DependencyInjection.Logger Assembly : MCMv4.dll Syntax public static class LoggerExtensions Methods LogCritical(IBUTRLogger, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(this IBUTRLogger logger, Exception exception, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogCritical(IBUTRLogger, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(this IBUTRLogger logger, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogDebug(IBUTRLogger, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(this IBUTRLogger logger, Exception exception, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogDebug(IBUTRLogger, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(this IBUTRLogger logger, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogError(IBUTRLogger, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(this IBUTRLogger logger, Exception exception, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogError(IBUTRLogger, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(this IBUTRLogger logger, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogInformation(IBUTRLogger, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(this IBUTRLogger logger, Exception exception, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogInformation(IBUTRLogger, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(this IBUTRLogger logger, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogTrace(IBUTRLogger, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(this IBUTRLogger logger, Exception exception, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogTrace(IBUTRLogger, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(this IBUTRLogger logger, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogWarning(IBUTRLogger, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(this IBUTRLogger logger, Exception exception, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. LogWarning(IBUTRLogger, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(this IBUTRLogger logger, string message, params object[] args) Parameters IBUTRLogger logger The Microsoft.Extensions.Logging.IBUTRLogger to write to. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format."
  },
  "api/BUTR.DependencyInjection.Logger.LogLevel.html": {
    "href": "api/BUTR.DependencyInjection.Logger.LogLevel.html",
    "title": "Enum LogLevel | MCM Documentation",
    "keywords": "Enum LogLevel Namespace : BUTR.DependencyInjection.Logger Assembly : MCMv4.dll Syntax public enum LogLevel Critical Debug Error Information None Trace Warning"
  },
  "api/BUTR.DependencyInjection.WithHistoryGenericServiceContainer.html": {
    "href": "api/BUTR.DependencyInjection.WithHistoryGenericServiceContainer.html",
    "title": "Class WithHistoryGenericServiceContainer | MCM Documentation",
    "keywords": "Class WithHistoryGenericServiceContainer Inheritance Object WithHistoryGenericServiceContainer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : BUTR.DependencyInjection Assembly : MCMv4.dll Syntax public class WithHistoryGenericServiceContainer : IGenericServiceContainer Constructors WithHistoryGenericServiceContainer(IGenericServiceContainer) Declaration public WithHistoryGenericServiceContainer(IGenericServiceContainer serviceContainer) Parameters IGenericServiceContainer serviceContainer Properties History Declaration public List<Action<IGenericServiceContainer>> History { get; } Property Value List < Action < IGenericServiceContainer >> Methods Build() Declaration public IGenericServiceProvider Build() Returns IGenericServiceProvider Implements IGenericServiceContainer.Build() RegisterScoped<TService>() Declaration public IGenericServiceContainer RegisterScoped<TService>() where TService : class Returns IGenericServiceContainer Type Parameters TService Implements IGenericServiceContainer.RegisterScoped<TService>() RegisterScoped<TService>(Func<IGenericServiceFactory, TService>) Declaration public IGenericServiceContainer RegisterScoped<TService>(Func<IGenericServiceFactory, TService> factory) where TService : class Parameters Func < IGenericServiceFactory , TService> factory Returns IGenericServiceContainer Type Parameters TService Implements IGenericServiceContainer.RegisterScoped<TService>(Func<IGenericServiceFactory, TService>) RegisterScoped<TService, TImplementation>() Declaration public IGenericServiceContainer RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class, TService Returns IGenericServiceContainer Type Parameters TService TImplementation Implements IGenericServiceContainer.RegisterScoped<TService, TImplementation>() RegisterSingleton<TService>() Declaration public IGenericServiceContainer RegisterSingleton<TService>() where TService : class Returns IGenericServiceContainer Type Parameters TService Implements IGenericServiceContainer.RegisterSingleton<TService>() RegisterSingleton<TService>(Func<IGenericServiceFactory, TService>) Declaration public IGenericServiceContainer RegisterSingleton<TService>(Func<IGenericServiceFactory, TService> factory) where TService : class Parameters Func < IGenericServiceFactory , TService> factory Returns IGenericServiceContainer Type Parameters TService Implements IGenericServiceContainer.RegisterSingleton<TService>(Func<IGenericServiceFactory, TService>) RegisterSingleton<TService, TImplementation>() Declaration public IGenericServiceContainer RegisterSingleton<TService, TImplementation>() where TService : class where TImplementation : class, TService Returns IGenericServiceContainer Type Parameters TService TImplementation Implements IGenericServiceContainer.RegisterSingleton<TService, TImplementation>() RegisterTransient(Type, Func<Object>) Declaration public IGenericServiceContainer RegisterTransient(Type serviceType, Func<object> factory) Parameters Type serviceType Func < Object > factory Returns IGenericServiceContainer Implements IGenericServiceContainer.RegisterTransient(Type, Func<Object>) RegisterTransient(Type, Type) Declaration public IGenericServiceContainer RegisterTransient(Type serviceType, Type implementationType) Parameters Type serviceType Type implementationType Returns IGenericServiceContainer Implements IGenericServiceContainer.RegisterTransient(Type, Type) RegisterTransient<TService>() Declaration public IGenericServiceContainer RegisterTransient<TService>() where TService : class Returns IGenericServiceContainer Type Parameters TService Implements IGenericServiceContainer.RegisterTransient<TService>() RegisterTransient<TService>(Func<TService>) Declaration public IGenericServiceContainer RegisterTransient<TService>(Func<TService> factory) where TService : class Parameters Func <TService> factory Returns IGenericServiceContainer Type Parameters TService Implements IGenericServiceContainer.RegisterTransient<TService>(Func<TService>) RegisterTransient<TService>(Func<IGenericServiceFactory, TService>) Declaration public IGenericServiceContainer RegisterTransient<TService>(Func<IGenericServiceFactory, TService> factory) where TService : class Parameters Func < IGenericServiceFactory , TService> factory Returns IGenericServiceContainer Type Parameters TService Implements IGenericServiceContainer.RegisterTransient<TService>(Func<IGenericServiceFactory, TService>) RegisterTransient<TService, TImplementation>() Declaration public IGenericServiceContainer RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class, TService Returns IGenericServiceContainer Type Parameters TService TImplementation Implements IGenericServiceContainer.RegisterTransient<TService, TImplementation>() Extension Methods ServiceCollectionExtensions.AddSettingsProvider<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsProvider<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsFormat<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsFormat<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsPropertyDiscoverer<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsPropertyDiscoverer<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsContainer<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsContainer<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSettingsBuilderFactory<TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddSingleton<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddScoped<TService>(IGenericServiceContainer) ServiceCollectionExtensions.AddTransient<TService, TImplementation>(IGenericServiceContainer) ServiceCollectionExtensions.AddTransient(IGenericServiceContainer, Type, Type) ServiceCollectionExtensions.AddTransient<TService>(IGenericServiceContainer, Func<TService>) ServiceCollectionExtensions.AddTransient(IGenericServiceContainer, Type, Func<Object>)"
  },
  "api/MCM.Abstractions.Attributes.BaseSettingPropertyAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.BaseSettingPropertyAttribute.html",
    "title": "Class BaseSettingPropertyAttribute | MCM Documentation",
    "keywords": "Class BaseSettingPropertyAttribute Inheritance Object Attribute BaseSettingPropertyAttribute SettingPropertyAttribute SettingPropertyBoolAttribute SettingPropertyDropdownAttribute SettingPropertyFloatingIntegerAttribute SettingPropertyIntegerAttribute SettingPropertyTextAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes Assembly : MCMv4.dll Syntax public abstract class BaseSettingPropertyAttribute : Attribute, _Attribute, IPropertyDefinitionBase Constructors BaseSettingPropertyAttribute(String, Int32, Boolean, String) Declaration protected BaseSettingPropertyAttribute(string displayName, int order = -1, bool requireRestart = true, string hintText = \"\") Parameters String displayName Int32 order Boolean requireRestart String hintText Properties DisplayName The display name of the setting in the settings menu. Declaration public string DisplayName { get; } Property Value String Implements IPropertyDefinitionBase.DisplayName HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. Declaration public string HintText { get; set; } Property Value String Implements IPropertyDefinitionBase.HintText Order Require restart of the game if the value is changed. Declaration public int Order { get; set; } Property Value Int32 Implements IPropertyDefinitionBase.Order RequireRestart Require restart of the game if the value is changed. Declaration public bool RequireRestart { get; set; } Property Value Boolean Implements IPropertyDefinitionBase.RequireRestart"
  },
  "api/MCM.Abstractions.Attributes.html": {
    "href": "api/MCM.Abstractions.Attributes.html",
    "title": "Namespace MCM.Abstractions.Attributes | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Attributes Classes BaseSettingPropertyAttribute SettingPropertyGroupAttribute Tells the settings menu that this setting property should be in a group. All settings will automatically be grouped together if they have a SettingPropertyGroupAttribute with the same GroupName."
  },
  "api/MCM.Abstractions.Attributes.SettingPropertyGroupAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.SettingPropertyGroupAttribute.html",
    "title": "Class SettingPropertyGroupAttribute | MCM Documentation",
    "keywords": "Class SettingPropertyGroupAttribute Tells the settings menu that this setting property should be in a group. All settings will automatically be grouped together if they have a SettingPropertyGroupAttribute with the same GroupName. Inheritance Object Attribute SettingPropertyGroupAttribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes Assembly : MCMv4.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class SettingPropertyGroupAttribute : Attribute, _Attribute, IPropertyGroupDefinition Constructors SettingPropertyGroupAttribute(String) Tells the settings menu that this setting property should be in a group. All settings will automatically be grouped together if they have a SettingPropertyGroupAttribute with the same GroupName. Declaration public SettingPropertyGroupAttribute(string groupName) Parameters String groupName The name of the setting group. Groups can set to be sub groups by separating the parent group's name and this group's name with a '/'. For example, \"Group 1/Group 2\" will name this group \"Group 2\" and place it as a sub group in \"Group 1\". Properties Default The default group used for settings that don't have a group explicitly set. Declaration public static IPropertyGroupDefinition Default { get; } Property Value IPropertyGroupDefinition GroupName The name of the settings group. Includes SubGroup notation if present. Declaration public string GroupName { get; } Property Value String Implements IPropertyGroupDefinition.GroupName GroupOrder Declaration public int GroupOrder { get; set; } Property Value Int32 Implements IPropertyGroupDefinition.GroupOrder"
  },
  "api/MCM.Abstractions.Attributes.v1.html": {
    "href": "api/MCM.Abstractions.Attributes.v1.html",
    "title": "Namespace MCM.Abstractions.Attributes.v1 | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Attributes.v1 Classes SettingPropertyAttribute Tells the Settings system that this property should be used for the settings menu."
  },
  "api/MCM.Abstractions.Attributes.v1.SettingPropertyAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v1.SettingPropertyAttribute.html",
    "title": "Class SettingPropertyAttribute | MCM Documentation",
    "keywords": "Class SettingPropertyAttribute Tells the Settings system that this property should be used for the settings menu. Inheritance Object Attribute BaseSettingPropertyAttribute SettingPropertyAttribute Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes.v1 Assembly : MCMv4.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class SettingPropertyAttribute : BaseSettingPropertyAttribute, _Attribute, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax Constructors SettingPropertyAttribute(String) Tells the Settings system that this property should be used for the settings menu. Declaration public SettingPropertyAttribute(string displayName) Parameters String displayName The name to be displayed in the settings menu for this property. SettingPropertyAttribute(String, Decimal, Decimal) Tells the Settings system that this property should be used for the settings menu. Declaration public SettingPropertyAttribute(string displayName, decimal minValue, decimal maxValue) Parameters String displayName The name to be displayed in the settings menu for this property. Decimal minValue The minimum int value that this property can be set to. This is used for the slider control. Decimal maxValue The maximum int value that this property can be set to. This is used for the slider control. SettingPropertyAttribute(String, Int32, Int32) Tells the Settings system that this property should be used for the settings menu. Declaration public SettingPropertyAttribute(string displayName, int minValue, int maxValue) Parameters String displayName The name to be displayed in the settings menu for this property. Int32 minValue The minimum int value that this property can be set to. This is used for the slider control. Int32 maxValue The maximum int value that this property can be set to. This is used for the slider control. SettingPropertyAttribute(String, Single, Single) Tells the Settings system that this property should be used for the settings menu. Declaration public SettingPropertyAttribute(string displayName, float minValue, float maxValue) Parameters String displayName The name to be displayed in the settings menu for this property. Single minValue The minimum float value that this property can be set to. This is used for the slider control. Single maxValue The maximum float value that this property can be set to. This is used for the slider control. Properties MaxValue The maximum value the setting can be set to. Used by the slider control. Declaration public decimal MaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue The minimum value the setting can be set to. Used by the slider control. Declaration public decimal MinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue"
  },
  "api/MCM.Abstractions.Attributes.v2.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.html",
    "title": "Namespace MCM.Abstractions.Attributes.v2 | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Attributes.v2 Classes SettingPropertyBoolAttribute SettingPropertyDropdownAttribute SettingPropertyFloatingIntegerAttribute SettingPropertyIntegerAttribute SettingPropertyTextAttribute"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyBoolAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyBoolAttribute.html",
    "title": "Class SettingPropertyBoolAttribute | MCM Documentation",
    "keywords": "Class SettingPropertyBoolAttribute Inheritance Object Attribute BaseSettingPropertyAttribute SettingPropertyBoolAttribute Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes.v2 Assembly : MCMv4.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyBoolAttribute : BaseSettingPropertyAttribute, _Attribute, IPropertyDefinitionBool, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Constructors SettingPropertyBoolAttribute(String) Declaration public SettingPropertyBoolAttribute(string displayName) Parameters String displayName Properties IsToggle Declaration public bool IsToggle { get; set; } Property Value Boolean Implements IPropertyDefinitionGroupToggle.IsToggle"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyDropdownAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyDropdownAttribute.html",
    "title": "Class SettingPropertyDropdownAttribute | MCM Documentation",
    "keywords": "Class SettingPropertyDropdownAttribute Inheritance Object Attribute BaseSettingPropertyAttribute SettingPropertyDropdownAttribute Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes.v2 Assembly : MCMv4.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyDropdownAttribute : BaseSettingPropertyAttribute, _Attribute, IPropertyDefinitionDropdown, IPropertyDefinitionBase Constructors SettingPropertyDropdownAttribute(String) Declaration public SettingPropertyDropdownAttribute(string displayName) Parameters String displayName Properties SelectedIndex Declaration public int SelectedIndex { get; } Property Value Int32 Implements IPropertyDefinitionDropdown.SelectedIndex"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyFloatingIntegerAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyFloatingIntegerAttribute.html",
    "title": "Class SettingPropertyFloatingIntegerAttribute | MCM Documentation",
    "keywords": "Class SettingPropertyFloatingIntegerAttribute Inheritance Object Attribute BaseSettingPropertyAttribute SettingPropertyFloatingIntegerAttribute Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes.v2 Assembly : MCMv4.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyFloatingIntegerAttribute : BaseSettingPropertyAttribute, _Attribute, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter Constructors SettingPropertyFloatingIntegerAttribute(String, Single, Single, String) Declaration public SettingPropertyFloatingIntegerAttribute(string displayName, float minValue, float maxValue, string valueFormat = \"0.00\") Parameters String displayName Single minValue Single maxValue String valueFormat Properties CustomFormatter Declaration public Type CustomFormatter { get; set; } Property Value Type Implements IPropertyDefinitionWithCustomFormatter.CustomFormatter MaxValue The maximum value the setting can be set to. Used by the slider control. Declaration public decimal MaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue The minimum value the setting can be set to. Used by the slider control. Declaration public decimal MinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue ValueFormat The format in which the slider's value will be displayed in. Declaration public string ValueFormat { get; } Property Value String Implements IPropertyDefinitionWithFormat.ValueFormat"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyIntegerAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyIntegerAttribute.html",
    "title": "Class SettingPropertyIntegerAttribute | MCM Documentation",
    "keywords": "Class SettingPropertyIntegerAttribute Inheritance Object Attribute BaseSettingPropertyAttribute SettingPropertyIntegerAttribute Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes.v2 Assembly : MCMv4.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyIntegerAttribute : BaseSettingPropertyAttribute, _Attribute, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter Constructors SettingPropertyIntegerAttribute(String, Int32, Int32, String) Declaration public SettingPropertyIntegerAttribute(string displayName, int minValue, int maxValue, string valueFormat = \"0\") Parameters String displayName Int32 minValue Int32 maxValue String valueFormat Properties CustomFormatter Declaration public Type CustomFormatter { get; set; } Property Value Type Implements IPropertyDefinitionWithCustomFormatter.CustomFormatter MaxValue The maximum value the setting can be set to. Used by the slider control. Declaration public decimal MaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue The minimum value the setting can be set to. Used by the slider control. Declaration public decimal MinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue ValueFormat The format in which the slider's value will be displayed in. Declaration public string ValueFormat { get; } Property Value String Implements IPropertyDefinitionWithFormat.ValueFormat"
  },
  "api/MCM.Abstractions.Attributes.v2.SettingPropertyTextAttribute.html": {
    "href": "api/MCM.Abstractions.Attributes.v2.SettingPropertyTextAttribute.html",
    "title": "Class SettingPropertyTextAttribute | MCM Documentation",
    "keywords": "Class SettingPropertyTextAttribute Inheritance Object Attribute BaseSettingPropertyAttribute SettingPropertyTextAttribute Inherited Members BaseSettingPropertyAttribute.DisplayName BaseSettingPropertyAttribute.Order BaseSettingPropertyAttribute.RequireRestart BaseSettingPropertyAttribute.HintText Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Attributes.v2 Assembly : MCMv4.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public sealed class SettingPropertyTextAttribute : BaseSettingPropertyAttribute, _Attribute, IPropertyDefinitionText, IPropertyDefinitionBase Constructors SettingPropertyTextAttribute(String, Int32, Boolean, String) Declaration public SettingPropertyTextAttribute(string displayName, int order = -1, bool requireRestart = true, string hintText = \"\") Parameters String displayName Int32 order Boolean requireRestart String hintText"
  },
  "api/MCM.Abstractions.Common.html": {
    "href": "api/MCM.Abstractions.Common.html",
    "title": "Namespace MCM.Abstractions.Common | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Common Classes SelectedIndexWrapper"
  },
  "api/MCM.Abstractions.Common.SelectedIndexWrapper.html": {
    "href": "api/MCM.Abstractions.Common.SelectedIndexWrapper.html",
    "title": "Class SelectedIndexWrapper | MCM Documentation",
    "keywords": "Class SelectedIndexWrapper Inheritance Object SelectedIndexWrapper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Common Assembly : MCMv4.dll Syntax public sealed class SelectedIndexWrapper : IWrapper Constructors SelectedIndexWrapper(Object) Declaration public SelectedIndexWrapper(object object) Parameters Object object Properties Object Declaration public object Object { get; } Property Value Object Implements IWrapper.Object SelectedIndex Declaration public int SelectedIndex { get; set; } Property Value Int32"
  },
  "api/MCM.Abstractions.Dropdown.DropdownDefault-1.html": {
    "href": "api/MCM.Abstractions.Dropdown.DropdownDefault-1.html",
    "title": "Class DropdownDefault<T> | MCM Documentation",
    "keywords": "Class DropdownDefault<T> Uses Game's ViewModels Inheritance Object List <T> DropdownDefault<T> Inherited Members System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object) List<T>.Add(T) List<T>.IList.Add(Object) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(Int32, Int32, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.IList.Contains(Object) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.ICollection.CopyTo(Array, Int32) List<T>.CopyTo(Int32, T[], Int32, Int32) List<T>.CopyTo(T[], Int32) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(Int32, Predicate<T>) List<T>.FindIndex(Int32, Int32, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(Int32, Predicate<T>) List<T>.FindLastIndex(Int32, Int32, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.IEnumerable<T>.GetEnumerator() List<T>.IEnumerable.GetEnumerator() List<T>.GetRange(Int32, Int32) List<T>.IndexOf(T) List<T>.IList.IndexOf(Object) List<T>.IndexOf(T, Int32) List<T>.IndexOf(T, Int32, Int32) List<T>.Insert(Int32, T) List<T>.IList.Insert(Int32, Object) List<T>.InsertRange(Int32, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, Int32) List<T>.LastIndexOf(T, Int32, Int32) List<T>.Remove(T) List<T>.IList.Remove(Object) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(Int32) List<T>.RemoveRange(Int32, Int32) List<T>.Reverse() List<T>.Reverse(Int32, Int32) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Int32, Int32, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.IList.IsFixedSize List<T>.ICollection<T>.IsReadOnly List<T>.IList.IsReadOnly List<T>.ICollection.IsSynchronized List<T>.ICollection.SyncRoot List<T>.Item[Int32] List<T>.IList.Item[Int32] Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Dropdown Assembly : MCMv4.dll Syntax public sealed class DropdownDefault<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IEqualityComparer<DropdownDefault<T>> Type Parameters T Constructors DropdownDefault(IEnumerable<T>, Int32) Declaration public DropdownDefault(IEnumerable<T> values, int selectedIndex) Parameters IEnumerable <T> values Int32 selectedIndex Properties Empty Declaration public static DropdownDefault<T> Empty { get; } Property Value DropdownDefault <T> SelectedIndex Declaration public int SelectedIndex { get; set; } Property Value Int32 SelectedValue Declaration public T SelectedValue { get; set; } Property Value T Methods Equals(DropdownDefault<T>, DropdownDefault<T>) Declaration public bool Equals(DropdownDefault<T> x, DropdownDefault<T> y) Parameters DropdownDefault <T> x DropdownDefault <T> y Returns Boolean Implements IEqualityComparer<T>.Equals(T, T) Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode() GetHashCode(DropdownDefault<T>) Declaration public int GetHashCode(DropdownDefault<T> obj) Parameters DropdownDefault <T> obj Returns Int32 Implements IEqualityComparer<T>.GetHashCode(T)"
  },
  "api/MCM.Abstractions.Dropdown.DropdownMCM-1.html": {
    "href": "api/MCM.Abstractions.Dropdown.DropdownMCM-1.html",
    "title": "Class DropdownMCM<T> | MCM Documentation",
    "keywords": "Class DropdownMCM<T> Uses MCM's ViewModels Inheritance Object List <T> DropdownMCM<T> Inherited Members System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object) List<T>.Add(T) List<T>.IList.Add(Object) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(Int32, Int32, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.IList.Contains(Object) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(T[]) List<T>.ICollection.CopyTo(Array, Int32) List<T>.CopyTo(Int32, T[], Int32, Int32) List<T>.CopyTo(T[], Int32) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindIndex(Int32, Predicate<T>) List<T>.FindIndex(Int32, Int32, Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.FindLastIndex(Int32, Predicate<T>) List<T>.FindLastIndex(Int32, Int32, Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.IEnumerable<T>.GetEnumerator() List<T>.IEnumerable.GetEnumerator() List<T>.GetRange(Int32, Int32) List<T>.IndexOf(T) List<T>.IList.IndexOf(Object) List<T>.IndexOf(T, Int32) List<T>.IndexOf(T, Int32, Int32) List<T>.Insert(Int32, T) List<T>.IList.Insert(Int32, Object) List<T>.InsertRange(Int32, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, Int32) List<T>.LastIndexOf(T, Int32, Int32) List<T>.Remove(T) List<T>.IList.Remove(Object) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(Int32) List<T>.RemoveRange(Int32, Int32) List<T>.Reverse() List<T>.Reverse(Int32, Int32) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Int32, Int32, IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.IList.IsFixedSize List<T>.ICollection<T>.IsReadOnly List<T>.IList.IsReadOnly List<T>.ICollection.IsSynchronized List<T>.ICollection.SyncRoot List<T>.Item[Int32] List<T>.IList.Item[Int32] Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Dropdown Assembly : MCMv4.dll Syntax public sealed class DropdownMCM<T> : List<T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IEqualityComparer<DropdownMCM<T>> where T : class Type Parameters T Constructors DropdownMCM(IEnumerable<T>, Int32) Declaration public DropdownMCM(IEnumerable<T> values, int selectedIndex) Parameters IEnumerable <T> values Int32 selectedIndex Properties Empty Declaration public static DropdownMCM<T> Empty { get; } Property Value DropdownMCM <T> SelectedIndex Declaration public int SelectedIndex { get; set; } Property Value Int32 SelectedValue Declaration public T SelectedValue { get; set; } Property Value T Methods Equals(DropdownMCM<T>, DropdownMCM<T>) Declaration public bool Equals(DropdownMCM<T> x, DropdownMCM<T> y) Parameters DropdownMCM <T> x DropdownMCM <T> y Returns Boolean Implements IEqualityComparer<T>.Equals(T, T) Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode() GetHashCode(DropdownMCM<T>) Declaration public int GetHashCode(DropdownMCM<T> obj) Parameters DropdownMCM <T> obj Returns Int32 Implements IEqualityComparer<T>.GetHashCode(T)"
  },
  "api/MCM.Abstractions.Dropdown.html": {
    "href": "api/MCM.Abstractions.Dropdown.html",
    "title": "Namespace MCM.Abstractions.Dropdown | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Dropdown Classes DropdownDefault<T> Uses Game's ViewModels DropdownMCM<T> Uses MCM's ViewModels MCMSelectorItemVM MCMSelectorVM<TSelectorItemVM> TODO: MCMSelectorVM<TSelectorItemVM, TSelectorItemVMValueType>"
  },
  "api/MCM.Abstractions.Dropdown.MCMSelectorItemVM.html": {
    "href": "api/MCM.Abstractions.Dropdown.MCMSelectorItemVM.html",
    "title": "Class MCMSelectorItemVM | MCM Documentation",
    "keywords": "Class MCMSelectorItemVM Inheritance Object ViewModel MCMSelectorItemVM Inherited Members ViewModel.UIDebugMode ViewModel.SetField<T>(T, T, String) ViewModel.OnPropertyChanged(String) ViewModel.OnPropertyChangedWithValue(Object, String) ViewModel.GetViewModelAtPath(BindingPath, Boolean) ViewModel.GetViewModelAtPath(BindingPath) ViewModel.GetPropertyValue(String, PropertyTypeFeeder) ViewModel.GetPropertyValue(String) ViewModel.GetPropertyType(String) ViewModel.SetPropertyValue(String, Object) ViewModel.OnFinalize() ViewModel.ExecuteCommand(String, Object[]) ViewModel.Properties ViewModel.PropertyChanged ViewModel.PropertyChangedWithValue Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Dropdown Assembly : MCMv4.dll Syntax public sealed class MCMSelectorItemVM : ViewModel, IViewModel, INotifyPropertyChanged Constructors MCMSelectorItemVM(Object) Declaration public MCMSelectorItemVM(object element) Parameters Object element MCMSelectorItemVM(Object, TextObject) Declaration public MCMSelectorItemVM(object element, TextObject hint) Parameters Object element TextObject hint Properties CanBeSelected Declaration [DataSourceProperty] public bool CanBeSelected { get; set; } Property Value Boolean Element Declaration public object Element { get; } Property Value Object Hint Declaration [DataSourceProperty] public HintViewModel Hint { get; set; } Property Value HintViewModel StringItem Declaration [DataSourceProperty] public string StringItem { get; set; } Property Value String Methods RefreshValues() Declaration public override void RefreshValues() Overrides ViewModel.RefreshValues()"
  },
  "api/MCM.Abstractions.Dropdown.MCMSelectorVM-1.html": {
    "href": "api/MCM.Abstractions.Dropdown.MCMSelectorVM-1.html",
    "title": "Class MCMSelectorVM<TSelectorItemVM> | MCM Documentation",
    "keywords": "Class MCMSelectorVM<TSelectorItemVM> TODO: Inheritance Object ViewModel MCMSelectorVM<TSelectorItemVM> MCMSelectorVM<TSelectorItemVM, TSelectorItemVMValueType> Inherited Members ViewModel.UIDebugMode ViewModel.SetField<T>(T, T, String) ViewModel.OnPropertyChanged(String) ViewModel.OnPropertyChangedWithValue(Object, String) ViewModel.GetViewModelAtPath(BindingPath, Boolean) ViewModel.GetViewModelAtPath(BindingPath) ViewModel.GetPropertyValue(String, PropertyTypeFeeder) ViewModel.GetPropertyValue(String) ViewModel.GetPropertyType(String) ViewModel.SetPropertyValue(String, Object) ViewModel.OnFinalize() ViewModel.ExecuteCommand(String, Object[]) ViewModel.Properties ViewModel.PropertyChanged ViewModel.PropertyChangedWithValue Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Dropdown Assembly : MCMv4.dll Syntax public class MCMSelectorVM<TSelectorItemVM> : ViewModel, IViewModel, INotifyPropertyChanged where TSelectorItemVM : ViewModel Type Parameters TSelectorItemVM ViewModel that accepts the objects passed by .ctor/Refresh Constructors MCMSelectorVM(Action<MCMSelectorVM<TSelectorItemVM>>) Declaration public MCMSelectorVM(Action<MCMSelectorVM<TSelectorItemVM>> onChange) Parameters Action < MCMSelectorVM <TSelectorItemVM>> onChange MCMSelectorVM(IEnumerable<Object>, Int32, Action<MCMSelectorVM<TSelectorItemVM>>) Declaration public MCMSelectorVM(IEnumerable<object> list, int selectedIndex, Action<MCMSelectorVM<TSelectorItemVM>> onChange) Parameters IEnumerable < Object > list Int32 selectedIndex Action < MCMSelectorVM <TSelectorItemVM>> onChange Fields _onChange Declaration protected Action<MCMSelectorVM<TSelectorItemVM>> _onChange Field Value Action < MCMSelectorVM <TSelectorItemVM>> _selectedIndex Declaration protected int _selectedIndex Field Value Int32 Properties Empty Declaration public static MCMSelectorVM<TSelectorItemVM> Empty { get; } Property Value MCMSelectorVM <TSelectorItemVM> HasSingleItem Declaration [DataSourceProperty] public bool HasSingleItem { get; set; } Property Value Boolean ItemList Declaration [DataSourceProperty] public MBBindingList<TSelectorItemVM> ItemList { get; set; } Property Value MBBindingList <TSelectorItemVM> SelectedIndex Declaration [DataSourceProperty] public int SelectedIndex { get; set; } Property Value Int32 SelectedItem Declaration [DataSourceProperty] public TSelectorItemVM SelectedItem { get; set; } Property Value TSelectorItemVM Methods AddItem(TSelectorItemVM) Declaration public void AddItem(TSelectorItemVM item) Parameters TSelectorItemVM item ExecuteRandomize() Declaration public void ExecuteRandomize() ExecuteSelectNextItem() Declaration public void ExecuteSelectNextItem() ExecuteSelectPreviousItem() Declaration public void ExecuteSelectPreviousItem() GetCurrentItem() Declaration public TSelectorItemVM GetCurrentItem() Returns TSelectorItemVM Refresh(IEnumerable<Object>, Int32, Action<MCMSelectorVM<TSelectorItemVM>>) Declaration public void Refresh(IEnumerable<object> list, int selectedIndex, Action<MCMSelectorVM<TSelectorItemVM>> onChange) Parameters IEnumerable < Object > list Int32 selectedIndex Action < MCMSelectorVM <TSelectorItemVM>> onChange RefreshValues() Declaration public override void RefreshValues() Overrides ViewModel.RefreshValues() SetOnChangeAction(Action<MCMSelectorVM<TSelectorItemVM>>) Declaration public void SetOnChangeAction(Action<MCMSelectorVM<TSelectorItemVM>> onChange) Parameters Action < MCMSelectorVM <TSelectorItemVM>> onChange"
  },
  "api/MCM.Abstractions.Dropdown.MCMSelectorVM-2.html": {
    "href": "api/MCM.Abstractions.Dropdown.MCMSelectorVM-2.html",
    "title": "Class MCMSelectorVM<TSelectorItemVM, TSelectorItemVMValueType> | MCM Documentation",
    "keywords": "Class MCMSelectorVM<TSelectorItemVM, TSelectorItemVMValueType> Inheritance Object ViewModel MCMSelectorVM <TSelectorItemVM> MCMSelectorVM<TSelectorItemVM, TSelectorItemVMValueType> Inherited Members MCMSelectorVM<TSelectorItemVM>.Empty MCMSelectorVM<TSelectorItemVM>._onChange MCMSelectorVM<TSelectorItemVM>._selectedIndex MCMSelectorVM<TSelectorItemVM>.ItemList MCMSelectorVM<TSelectorItemVM>.SelectedIndex MCMSelectorVM<TSelectorItemVM>.SelectedItem MCMSelectorVM<TSelectorItemVM>.HasSingleItem MCMSelectorVM<TSelectorItemVM>.RefreshValues() MCMSelectorVM<TSelectorItemVM>.Refresh(IEnumerable<Object>, Int32, Action<MCMSelectorVM<TSelectorItemVM>>) MCMSelectorVM<TSelectorItemVM>.GetCurrentItem() MCMSelectorVM<TSelectorItemVM>.SetOnChangeAction(Action<MCMSelectorVM<TSelectorItemVM>>) MCMSelectorVM<TSelectorItemVM>.AddItem(TSelectorItemVM) MCMSelectorVM<TSelectorItemVM>.ExecuteRandomize() MCMSelectorVM<TSelectorItemVM>.ExecuteSelectNextItem() MCMSelectorVM<TSelectorItemVM>.ExecuteSelectPreviousItem() ViewModel.UIDebugMode ViewModel.SetField<T>(T, T, String) ViewModel.OnPropertyChanged(String) ViewModel.OnPropertyChangedWithValue(Object, String) ViewModel.GetViewModelAtPath(BindingPath, Boolean) ViewModel.GetViewModelAtPath(BindingPath) ViewModel.GetPropertyValue(String, PropertyTypeFeeder) ViewModel.GetPropertyValue(String) ViewModel.GetPropertyType(String) ViewModel.SetPropertyValue(String, Object) ViewModel.OnFinalize() ViewModel.ExecuteCommand(String, Object[]) ViewModel.Properties ViewModel.PropertyChanged ViewModel.PropertyChangedWithValue Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Dropdown Assembly : MCMv4.dll Syntax public class MCMSelectorVM<TSelectorItemVM, TSelectorItemVMValueType> : MCMSelectorVM<TSelectorItemVM>, IViewModel, INotifyPropertyChanged where TSelectorItemVM : ViewModel where TSelectorItemVMValueType : class Type Parameters TSelectorItemVM TSelectorItemVMValueType Constructors MCMSelectorVM(Action<MCMSelectorVM<TSelectorItemVM>>) Declaration public MCMSelectorVM(Action<MCMSelectorVM<TSelectorItemVM>> onChange) Parameters Action < MCMSelectorVM <TSelectorItemVM>> onChange MCMSelectorVM(IEnumerable<TSelectorItemVMValueType>, Int32, Action<MCMSelectorVM<TSelectorItemVM>>) Declaration public MCMSelectorVM(IEnumerable<TSelectorItemVMValueType> list, int selectedIndex, Action<MCMSelectorVM<TSelectorItemVM>> onChange) Parameters IEnumerable <TSelectorItemVMValueType> list Int32 selectedIndex Action < MCMSelectorVM <TSelectorItemVM>> onChange Methods Refresh(IEnumerable<TSelectorItemVMValueType>, Int32, Action<MCMSelectorVM<TSelectorItemVM>>) Declaration public void Refresh(IEnumerable<TSelectorItemVMValueType> list, int selectedIndex, Action<MCMSelectorVM<TSelectorItemVM>> onChange) Parameters IEnumerable <TSelectorItemVMValueType> list Int32 selectedIndex Action < MCMSelectorVM <TSelectorItemVM>> onChange"
  },
  "api/MCM.Abstractions.FluentBuilder.BaseSettingsBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.BaseSettingsBuilder.html",
    "title": "Class BaseSettingsBuilder | MCM Documentation",
    "keywords": "Class BaseSettingsBuilder Inheritance Object BaseSettingsBuilder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.FluentBuilder Assembly : MCMv4.dll Syntax public abstract class BaseSettingsBuilder : ISettingsBuilder Methods BuildAsGlobal() Declaration public abstract FluentGlobalSettings BuildAsGlobal() Returns FluentGlobalSettings Implements ISettingsBuilder.BuildAsGlobal() BuildAsPerSave() Declaration public abstract FluentPerSaveSettings BuildAsPerSave() Returns FluentPerSaveSettings Implements ISettingsBuilder.BuildAsPerSave() Create(String, String) Declaration public static ISettingsBuilder Create(string id, string displayName) Parameters String id String displayName Returns ISettingsBuilder CreateGroup(String, Action<ISettingsPropertyGroupBuilder>) Declaration public abstract ISettingsBuilder CreateGroup(string name, Action<ISettingsPropertyGroupBuilder> builder) Parameters String name Action < ISettingsPropertyGroupBuilder > builder Returns ISettingsBuilder Implements ISettingsBuilder.CreateGroup(String, Action<ISettingsPropertyGroupBuilder>) CreatePreset(String, Action<ISettingsPresetBuilder>) Declaration public abstract ISettingsBuilder CreatePreset(string name, Action<ISettingsPresetBuilder> builder) Parameters String name Action < ISettingsPresetBuilder > builder Returns ISettingsBuilder Implements ISettingsBuilder.CreatePreset(String, Action<ISettingsPresetBuilder>) SetFolderName(String) Declaration public abstract ISettingsBuilder SetFolderName(string value) Parameters String value Returns ISettingsBuilder Implements ISettingsBuilder.SetFolderName(String) SetFormat(String) Declaration public abstract ISettingsBuilder SetFormat(string value) Parameters String value Returns ISettingsBuilder Implements ISettingsBuilder.SetFormat(String) SetOnPropertyChanged(PropertyChangedEventHandler) Declaration public abstract ISettingsBuilder SetOnPropertyChanged(PropertyChangedEventHandler value) Parameters PropertyChangedEventHandler value Returns ISettingsBuilder Implements ISettingsBuilder.SetOnPropertyChanged(PropertyChangedEventHandler) SetSubFolder(String) Declaration public abstract ISettingsBuilder SetSubFolder(string value) Parameters String value Returns ISettingsBuilder Implements ISettingsBuilder.SetSubFolder(String) SetSubGroupDelimiter(Char) Declaration public abstract ISettingsBuilder SetSubGroupDelimiter(char value) Parameters Char value Returns ISettingsBuilder Implements ISettingsBuilder.SetSubGroupDelimiter(Char) SetUIVersion(Int32) Declaration public abstract ISettingsBuilder SetUIVersion(int value) Parameters Int32 value Returns ISettingsBuilder Implements ISettingsBuilder.SetUIVersion(Int32)"
  },
  "api/MCM.Abstractions.FluentBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.html",
    "title": "Namespace MCM.Abstractions.FluentBuilder | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.FluentBuilder Classes BaseSettingsBuilder Interfaces ISettingsBuilder An interface that defines the necessary members for implementing a settings builder. ISettingsBuilderFactory ISettingsPresetBuilder ISettingsPropertyBuilder An interface that defines the necessary members for implementing a settings property builder. ISettingsPropertyBuilder<TSettingsPropertyBuilder> An interface that defines the necessary members for implementing a settings property builder. ISettingsPropertyGroupBuilder An interface that defines the necessary members for implementing a settings property group builder."
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsBuilder.html",
    "title": "Interface ISettingsBuilder | MCM Documentation",
    "keywords": "Interface ISettingsBuilder An interface that defines the necessary members for implementing a settings builder. Namespace : MCM.Abstractions.FluentBuilder Assembly : MCMv4.dll Syntax public interface ISettingsBuilder Methods BuildAsGlobal() Returns a Global setting instance. Use Register and Unregister for MCM to use it. Declaration FluentGlobalSettings BuildAsGlobal() Returns FluentGlobalSettings BuildAsPerSave() Returns a PerSave setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. Declaration FluentPerSaveSettings BuildAsPerSave() Returns FluentPerSaveSettings CreateGroup(String, Action<ISettingsPropertyGroupBuilder>) Creates a property group where you can define your properties. The default Group name is 'Misc'. Use the action delegate to configure the property group. Declaration ISettingsBuilder CreateGroup(string name, Action<ISettingsPropertyGroupBuilder> builder) Parameters String name Action < ISettingsPropertyGroupBuilder > builder Returns ISettingsBuilder The settings builder. CreatePreset(String, Action<ISettingsPresetBuilder>) Declaration ISettingsBuilder CreatePreset(string name, Action<ISettingsPresetBuilder> builder) Parameters String name Action < ISettingsPresetBuilder > builder Returns ISettingsBuilder The settings builder. SetFolderName(String) See FolderName . Declaration ISettingsBuilder SetFolderName(string value) Parameters String value The value. Returns ISettingsBuilder The settings builder. SetFormat(String) See FormatType . Declaration ISettingsBuilder SetFormat(string value) Parameters String value The value. Returns ISettingsBuilder The settings builder. SetOnPropertyChanged(PropertyChangedEventHandler) See OnPropertyChanged(String) . Declaration ISettingsBuilder SetOnPropertyChanged(PropertyChangedEventHandler value) Parameters PropertyChangedEventHandler value The value. Returns ISettingsBuilder The settings builder. SetSubFolder(String) See SubFolder . Declaration ISettingsBuilder SetSubFolder(string value) Parameters String value The value. Returns ISettingsBuilder The settings builder. SetSubGroupDelimiter(Char) See SubGroupDelimiter . Declaration ISettingsBuilder SetSubGroupDelimiter(char value) Parameters Char value The value. Returns ISettingsBuilder The settings builder. SetUIVersion(Int32) See UIVersion . Declaration ISettingsBuilder SetUIVersion(int value) Parameters Int32 value The value. Returns ISettingsBuilder The settings builder."
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsBuilderFactory.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsBuilderFactory.html",
    "title": "Interface ISettingsBuilderFactory | MCM Documentation",
    "keywords": "Interface ISettingsBuilderFactory Namespace : MCM.Abstractions.FluentBuilder Assembly : MCMv4.dll Syntax public interface ISettingsBuilderFactory Methods Create(String, String) Declaration ISettingsBuilder Create(string id, string displayName) Parameters String id String displayName Returns ISettingsBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPresetBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPresetBuilder.html",
    "title": "Interface ISettingsPresetBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPresetBuilder Namespace : MCM.Abstractions.FluentBuilder Assembly : MCMv4.dll Syntax public interface ISettingsPresetBuilder Properties PropertyValues Declaration IDictionary<string, object> PropertyValues { get; } Property Value IDictionary < String , Object > Methods SetPropertyValue(String, Object) Declaration ISettingsPresetBuilder SetPropertyValue(string property, object value) Parameters String property Object value Returns ISettingsPresetBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder.html",
    "title": "Interface ISettingsPropertyBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyBuilder An interface that defines the necessary members for implementing a settings property builder. Namespace : MCM.Abstractions.FluentBuilder Assembly : MCMv4.dll Syntax public interface ISettingsPropertyBuilder Properties Name See DisplayName Declaration string Name { get; } Property Value String PropertyReference PropertyReference Declaration IRef PropertyReference { get; } Property Value IRef Methods GetDefinitions() Gets this property definition. Declaration IEnumerable<IPropertyDefinitionBase> GetDefinitions() Returns IEnumerable < IPropertyDefinitionBase > An enumerable of the property definitions."
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder-1.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyBuilder-1.html",
    "title": "Interface ISettingsPropertyBuilder<TSettingsPropertyBuilder> | MCM Documentation",
    "keywords": "Interface ISettingsPropertyBuilder<TSettingsPropertyBuilder> An interface that defines the necessary members for implementing a settings property builder. Inherited Members ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Namespace : MCM.Abstractions.FluentBuilder Assembly : MCMv4.dll Syntax public interface ISettingsPropertyBuilder<out TSettingsPropertyBuilder> : ISettingsPropertyBuilder where TSettingsPropertyBuilder : ISettingsPropertyBuilder Type Parameters TSettingsPropertyBuilder Methods SetHintText(String) The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. Declaration TSettingsPropertyBuilder SetHintText(string value) Parameters String value The value. Returns TSettingsPropertyBuilder The settings property builder. SetOrder(Int32) Require restart of the game if the value is changed. Declaration TSettingsPropertyBuilder SetOrder(int value) Parameters Int32 value The value. Returns TSettingsPropertyBuilder The settings property builder. SetRequireRestart(Boolean) Require restart of the game if the value is changed. Declaration TSettingsPropertyBuilder SetRequireRestart(bool value) Parameters Boolean value The value. Returns TSettingsPropertyBuilder The settings property builder."
  },
  "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyGroupBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.ISettingsPropertyGroupBuilder.html",
    "title": "Interface ISettingsPropertyGroupBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyGroupBuilder An interface that defines the necessary members for implementing a settings property group builder. Namespace : MCM.Abstractions.FluentBuilder Assembly : MCMv4.dll Syntax public interface ISettingsPropertyGroupBuilder Properties Properties The actual properties stored in the builder. Declaration Dictionary<string, ISettingsPropertyBuilder> Properties { get; } Property Value Dictionary < String , ISettingsPropertyBuilder > Methods AddBool(String, String, IRef, Action<ISettingsPropertyBoolBuilder>) Creates a Bool property. Declaration ISettingsPropertyGroupBuilder AddBool(string id, string name, IRef ref, Action<ISettingsPropertyBoolBuilder> builder) Parameters String id Internal ID that will be used for serialization. String name Will be shown at the setting screen. IRef ref Reference to the value used by the property. Action < ISettingsPropertyBoolBuilder > builder Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddCustom<TSettingsPropertyBuilder>(ISettingsPropertyBuilder<TSettingsPropertyBuilder>) Adds a custom property. The custom property should implement one of the interfaces defined in MCM.Abstractions.Settings.Definitions namespace. Currently there is no way of defining a custom UI Control. One of the possible fixes would be to use UIExtender library. Declaration ISettingsPropertyGroupBuilder AddCustom<TSettingsPropertyBuilder>(ISettingsPropertyBuilder<TSettingsPropertyBuilder> builder) where TSettingsPropertyBuilder : ISettingsPropertyBuilder Parameters ISettingsPropertyBuilder <TSettingsPropertyBuilder> builder Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. Type Parameters TSettingsPropertyBuilder A derived class of ISettingsPropertyBuilder . AddDropdown(String, String, Int32, IRef, Action<ISettingsPropertyDropdownBuilder>) Creates a Dropdown property. Declaration ISettingsPropertyGroupBuilder AddDropdown(string id, string name, int selectedIndex, IRef ref, Action<ISettingsPropertyDropdownBuilder> builder) Parameters String id Internal ID that will be used for serialization. String name Will be shown at the setting screen. Int32 selectedIndex See SelectedIndex . IRef ref Reference to the value used by the property. Action < ISettingsPropertyDropdownBuilder > builder Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddFloatingInteger(String, String, Single, Single, IRef, Action<ISettingsPropertyFloatingIntegerBuilder>) Creates an Float Slider property. Declaration ISettingsPropertyGroupBuilder AddFloatingInteger(string id, string name, float minValue, float maxValue, IRef ref, Action<ISettingsPropertyFloatingIntegerBuilder> builder) Parameters String id Internal ID that will be used for serialization. String name Will be shown at the setting screen. Single minValue See MinValue . Single maxValue See MaxValue . IRef ref Reference to the value used by the property. Action < ISettingsPropertyFloatingIntegerBuilder > builder Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddInteger(String, String, Int32, Int32, IRef, Action<ISettingsPropertyIntegerBuilder>) Creates an Integer Slider property. Declaration ISettingsPropertyGroupBuilder AddInteger(string id, string name, int minValue, int maxValue, IRef ref, Action<ISettingsPropertyIntegerBuilder> builder) Parameters String id Internal ID that will be used for serialization. String name Will be shown at the setting screen. Int32 minValue MinValue . Int32 maxValue MaxValue . IRef ref Reference to the value used by the property. Action < ISettingsPropertyIntegerBuilder > builder Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddText(String, String, IRef, Action<ISettingsPropertyTextBuilder>) Creates an TextBox property. Declaration ISettingsPropertyGroupBuilder AddText(string id, string name, IRef ref, Action<ISettingsPropertyTextBuilder> builder) Parameters String id Internal ID that will be used for serialization. String name Will be shown at the setting screen. IRef ref Reference to the value used by the property. Action < ISettingsPropertyTextBuilder > builder Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. AddToggle(String, String, IRef, Action<ISettingsPropertyGroupToggleBuilder>) Creates a Toggle(bool) property. Declaration ISettingsPropertyGroupBuilder AddToggle(string id, string name, IRef ref, Action<ISettingsPropertyGroupToggleBuilder> builder) Parameters String id Internal ID that will be used for serialization. String name Will be shown at the setting screen. IRef ref Reference to the value used by the property. Action < ISettingsPropertyGroupToggleBuilder > builder Settings property builder. Returns ISettingsPropertyGroupBuilder The settings property group builder. GetPropertyGroupDefinition() Gets this property group definition. Declaration IPropertyGroupDefinition GetPropertyGroupDefinition() Returns IPropertyGroupDefinition A property group definition. SetGroupOrder(Int32) Declaration ISettingsPropertyGroupBuilder SetGroupOrder(int value) Parameters Int32 value The value. Returns ISettingsPropertyGroupBuilder The settings property group builder."
  },
  "api/MCM.Abstractions.FluentBuilder.Models.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.html",
    "title": "Namespace MCM.Abstractions.FluentBuilder.Models | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.FluentBuilder.Models Interfaces ISettingsPropertyBoolBuilder ISettingsPropertyDropdownBuilder ISettingsPropertyFloatingIntegerBuilder ISettingsPropertyGroupToggleBuilder ISettingsPropertyIntegerBuilder ISettingsPropertyTextBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyBoolBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyBoolBuilder.html",
    "title": "Interface ISettingsPropertyBoolBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyBoolBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>.SetOrder(Int32) ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>.SetRequireRestart(Boolean) ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>.SetHintText(String) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Namespace : MCM.Abstractions.FluentBuilder.Models Assembly : MCMv4.dll Syntax public interface ISettingsPropertyBoolBuilder : ISettingsPropertyBuilder<ISettingsPropertyBoolBuilder>, ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyDropdownBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyDropdownBuilder.html",
    "title": "Interface ISettingsPropertyDropdownBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyDropdownBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>.SetOrder(Int32) ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>.SetRequireRestart(Boolean) ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>.SetHintText(String) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Namespace : MCM.Abstractions.FluentBuilder.Models Assembly : MCMv4.dll Syntax public interface ISettingsPropertyDropdownBuilder : ISettingsPropertyBuilder<ISettingsPropertyDropdownBuilder>, ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyFloatingIntegerBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyFloatingIntegerBuilder.html",
    "title": "Interface ISettingsPropertyFloatingIntegerBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyFloatingIntegerBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>.SetOrder(Int32) ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>.SetRequireRestart(Boolean) ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>.SetHintText(String) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Namespace : MCM.Abstractions.FluentBuilder.Models Assembly : MCMv4.dll Syntax public interface ISettingsPropertyFloatingIntegerBuilder : ISettingsPropertyBuilder<ISettingsPropertyFloatingIntegerBuilder>, ISettingsPropertyBuilder Methods AddValueFormat(String) Declaration ISettingsPropertyBuilder AddValueFormat(string value) Parameters String value Returns ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyGroupToggleBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyGroupToggleBuilder.html",
    "title": "Interface ISettingsPropertyGroupToggleBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyGroupToggleBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>.SetOrder(Int32) ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>.SetRequireRestart(Boolean) ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>.SetHintText(String) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Namespace : MCM.Abstractions.FluentBuilder.Models Assembly : MCMv4.dll Syntax public interface ISettingsPropertyGroupToggleBuilder : ISettingsPropertyBuilder<ISettingsPropertyGroupToggleBuilder>, ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyIntegerBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyIntegerBuilder.html",
    "title": "Interface ISettingsPropertyIntegerBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyIntegerBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>.SetOrder(Int32) ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>.SetRequireRestart(Boolean) ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>.SetHintText(String) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Namespace : MCM.Abstractions.FluentBuilder.Models Assembly : MCMv4.dll Syntax public interface ISettingsPropertyIntegerBuilder : ISettingsPropertyBuilder<ISettingsPropertyIntegerBuilder>, ISettingsPropertyBuilder Methods AddValueFormat(String) Declaration ISettingsPropertyBuilder AddValueFormat(string value) Parameters String value Returns ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyTextBuilder.html": {
    "href": "api/MCM.Abstractions.FluentBuilder.Models.ISettingsPropertyTextBuilder.html",
    "title": "Interface ISettingsPropertyTextBuilder | MCM Documentation",
    "keywords": "Interface ISettingsPropertyTextBuilder Inherited Members ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>.SetOrder(Int32) ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>.SetRequireRestart(Boolean) ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>.SetHintText(String) ISettingsPropertyBuilder.Name ISettingsPropertyBuilder.PropertyReference ISettingsPropertyBuilder.GetDefinitions() Namespace : MCM.Abstractions.FluentBuilder.Models Assembly : MCMv4.dll Syntax public interface ISettingsPropertyTextBuilder : ISettingsPropertyBuilder<ISettingsPropertyTextBuilder>, ISettingsPropertyBuilder"
  },
  "api/MCM.Abstractions.html": {
    "href": "api/MCM.Abstractions.html",
    "title": "Namespace MCM.Abstractions | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions Interfaces IWrapper"
  },
  "api/MCM.Abstractions.IWrapper.html": {
    "href": "api/MCM.Abstractions.IWrapper.html",
    "title": "Interface IWrapper | MCM Documentation",
    "keywords": "Interface IWrapper Namespace : MCM.Abstractions Assembly : MCMv4.dll Syntax public interface IWrapper Properties Object Declaration object Object { get; } Property Value Object"
  },
  "api/MCM.Abstractions.Ref.html": {
    "href": "api/MCM.Abstractions.Ref.html",
    "title": "Namespace MCM.Abstractions.Ref | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Ref Classes PropertyRef Wraps a class property for MCM to get/set its value ProxyRef<T> A broader wrapper. Uses functions for getting/setting the value RefWrapper Wrapper around any type that implements IRef . We don't use casting because it might not be safe. StorageRef Interfaces IRef An interface that provides access to some value for MCM to get/set."
  },
  "api/MCM.Abstractions.Ref.IRef.html": {
    "href": "api/MCM.Abstractions.Ref.IRef.html",
    "title": "Interface IRef | MCM Documentation",
    "keywords": "Interface IRef An interface that provides access to some value for MCM to get/set. Inherited Members INotifyPropertyChanged.PropertyChanged Namespace : MCM.Abstractions.Ref Assembly : MCMv4.dll Syntax public interface IRef : INotifyPropertyChanged Properties Type Underlying type of the value Declaration Type Type { get; } Property Value Type Value Declaration object Value { get; set; } Property Value Object"
  },
  "api/MCM.Abstractions.Ref.PropertyRef.html": {
    "href": "api/MCM.Abstractions.Ref.PropertyRef.html",
    "title": "Class PropertyRef | MCM Documentation",
    "keywords": "Class PropertyRef Wraps a class property for MCM to get/set its value Inheritance Object PropertyRef Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Ref Assembly : MCMv4.dll Syntax public class PropertyRef : IRef, INotifyPropertyChanged, IEquatable<PropertyRef> Constructors PropertyRef(PropertyInfo, Object) Declaration public PropertyRef(PropertyInfo propInfo, object instance) Parameters PropertyInfo propInfo Object instance Properties Instance Declaration public object Instance { get; } Property Value Object PropertyInfo Declaration public PropertyInfo PropertyInfo { get; } Property Value PropertyInfo Type Underlying type of the value Declaration public Type Type { get; } Property Value Type Implements IRef.Type Value Declaration public object Value { get; set; } Property Value Object Implements IRef.Value Methods Equals(PropertyRef) Declaration public bool Equals(PropertyRef other) Parameters PropertyRef other Returns Boolean Implements IEquatable<T>.Equals(T) Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode() OnPropertyChanged(String) Declaration protected virtual void OnPropertyChanged(string propertyName = null) Parameters String propertyName Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Operators Equality(PropertyRef, PropertyRef) Declaration public static bool operator ==(PropertyRef left, PropertyRef right) Parameters PropertyRef left PropertyRef right Returns Boolean Inequality(PropertyRef, PropertyRef) Declaration public static bool operator !=(PropertyRef left, PropertyRef right) Parameters PropertyRef left PropertyRef right Returns Boolean"
  },
  "api/MCM.Abstractions.Ref.ProxyRef-1.html": {
    "href": "api/MCM.Abstractions.Ref.ProxyRef-1.html",
    "title": "Class ProxyRef<T> | MCM Documentation",
    "keywords": "Class ProxyRef<T> A broader wrapper. Uses functions for getting/setting the value Inheritance Object ProxyRef<T> Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Ref Assembly : MCMv4.dll Syntax public class ProxyRef<T> : IRef, INotifyPropertyChanged, IEquatable<ProxyRef<T>> Type Parameters T Constructors ProxyRef(Func<T>, Action<T>) Declaration public ProxyRef(Func<T> getter, Action<T> setter) Parameters Func <T> getter Action <T> setter Properties Type Underlying type of the value Declaration public Type Type { get; } Property Value Type Implements IRef.Type Value Declaration public object Value { get; set; } Property Value Object Implements IRef.Value Methods Equals(ProxyRef<T>) Declaration public bool Equals(ProxyRef<T> other) Parameters ProxyRef <T> other Returns Boolean Implements IEquatable<T>.Equals(T) Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode() OnPropertyChanged(String) Declaration protected virtual void OnPropertyChanged(string propertyName = null) Parameters String propertyName Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Operators Equality(ProxyRef<T>, ProxyRef<T>) Declaration public static bool operator ==(ProxyRef<T> left, ProxyRef<T> right) Parameters ProxyRef <T> left ProxyRef <T> right Returns Boolean Inequality(ProxyRef<T>, ProxyRef<T>) Declaration public static bool operator !=(ProxyRef<T> left, ProxyRef<T> right) Parameters ProxyRef <T> left ProxyRef <T> right Returns Boolean"
  },
  "api/MCM.Abstractions.Ref.RefWrapper.html": {
    "href": "api/MCM.Abstractions.Ref.RefWrapper.html",
    "title": "Class RefWrapper | MCM Documentation",
    "keywords": "Class RefWrapper Wrapper around any type that implements IRef . We don't use casting because it might not be safe. Inheritance Object RefWrapper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Ref Assembly : MCMv4.dll Syntax public class RefWrapper : IRef, INotifyPropertyChanged, IWrapper Constructors RefWrapper(Object) Declaration public RefWrapper(object object) Parameters Object object Properties Object Declaration public object Object { get; } Property Value Object Implements IWrapper.Object Type Underlying type of the value Declaration public Type Type { get; } Property Value Type Implements IRef.Type Value Declaration public object Value { get; set; } Property Value Object Implements IRef.Value Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged"
  },
  "api/MCM.Abstractions.Ref.StorageRef.html": {
    "href": "api/MCM.Abstractions.Ref.StorageRef.html",
    "title": "Class StorageRef | MCM Documentation",
    "keywords": "Class StorageRef Inheritance Object StorageRef Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Ref Assembly : MCMv4.dll Syntax public sealed class StorageRef : IRef, INotifyPropertyChanged Constructors StorageRef(Object) Declaration public StorageRef(object value) Parameters Object value Properties Type Declaration public Type Type { get; } Property Value Type Implements IRef.Type Value Declaration public object Value { get; set; } Property Value Object Implements IRef.Value Events PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged"
  },
  "api/MCM.Abstractions.Settings.Base.BaseSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.BaseSettings.html",
    "title": "Class BaseSettings | MCM Documentation",
    "keywords": "Class BaseSettings Inheritance Object BaseSettings GlobalSettings PerSaveSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base Assembly : MCMv4.dll Syntax public abstract class BaseSettings : INotifyPropertyChanged Fields SaveTriggered Declaration public const string SaveTriggered = \"SAVE_TRIGGERED\" Field Value String Properties DiscoveryType Declaration public virtual string DiscoveryType { get; } Property Value String DisplayName The display name of the setting in the settings menu. Declaration public abstract string DisplayName { get; } Property Value String FolderName Declaration public virtual string FolderName { get; } Property Value String FormatType Declaration public virtual string FormatType { get; } Property Value String Id Unique identifier used to save to file. Make sure this is unique to your mod. Declaration public abstract string Id { get; } Property Value String SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. Declaration public virtual string SubFolder { get; } Property Value String SubGroupDelimiter Declaration public virtual char SubGroupDelimiter { get; } Property Value Char UIVersion Declaration public virtual int UIVersion { get; } Property Value Int32 Methods CopyAsNew() Declaration protected virtual BaseSettings CopyAsNew() Returns BaseSettings CreateNew() Declaration protected virtual BaseSettings CreateNew() Returns BaseSettings GetAvailablePresets() Declaration public virtual IDictionary<string, Func<BaseSettings>> GetAvailablePresets() Returns IDictionary < String , Func < BaseSettings >> OnPropertyChanged(String) Declaration public virtual void OnPropertyChanged(string propertyName = null) Parameters String propertyName Events PropertyChanged Declaration public virtual event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.AttributeGlobalSettings-1.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.AttributeGlobalSettings-1.html",
    "title": "Class AttributeGlobalSettings<T> | MCM Documentation",
    "keywords": "Class AttributeGlobalSettings<T> Inheritance Object BaseSettings GlobalSettings GlobalSettings <T> AttributeGlobalSettings<T> Inherited Members GlobalSettings<T>.Instance GlobalSettings.Cache BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public abstract class AttributeGlobalSettings<T> : GlobalSettings<T>, INotifyPropertyChanged where T : GlobalSettings, new() Type Parameters T Properties DiscoveryType Declaration public sealed override string DiscoveryType { get; } Property Value String Overrides BaseSettings.DiscoveryType Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.BaseFluentGlobalSettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.BaseFluentGlobalSettingsWrapper.html",
    "title": "Class BaseFluentGlobalSettingsWrapper | MCM Documentation",
    "keywords": "Class BaseFluentGlobalSettingsWrapper Inheritance Object BaseSettings GlobalSettings FluentGlobalSettings BaseFluentGlobalSettingsWrapper Inherited Members FluentGlobalSettings.Id FluentGlobalSettings.DisplayName FluentGlobalSettings.FolderName FluentGlobalSettings.SubFolder FluentGlobalSettings.FormatType FluentGlobalSettings.DiscoveryType FluentGlobalSettings.UIVersion FluentGlobalSettings.SubGroupDelimiter FluentGlobalSettings.PropertyChanged FluentGlobalSettings.SettingPropertyGroups FluentGlobalSettings.Register() FluentGlobalSettings.Unregister() FluentGlobalSettings.CreateNew() FluentGlobalSettings.GetAvailablePresets() GlobalSettings.Cache BaseSettings.SaveTriggered BaseSettings.OnPropertyChanged(String) BaseSettings.CopyAsNew() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public abstract class BaseFluentGlobalSettingsWrapper : FluentGlobalSettings, INotifyPropertyChanged, IFluentSettings, IWrapper Constructors BaseFluentGlobalSettingsWrapper(Object, String, String, String, String, String, Int32, Char, PropertyChangedEventHandler, IEnumerable<SettingsPropertyGroupDefinition>, Dictionary<String, ISettingsPresetBuilder>) Declaration protected BaseFluentGlobalSettingsWrapper(object object, string id, string displayName, string folderName, string subFolder, string format, int uiVersion, char subGroupDelimiter, PropertyChangedEventHandler onPropertyChanged, IEnumerable<SettingsPropertyGroupDefinition> settingPropertyGroups, Dictionary<string, ISettingsPresetBuilder> presets) Parameters Object object String id String displayName String folderName String subFolder String format Int32 uiVersion Char subGroupDelimiter PropertyChangedEventHandler onPropertyChanged IEnumerable < SettingsPropertyGroupDefinition > settingPropertyGroups Dictionary < String , ISettingsPresetBuilder > presets Properties Object Declaration public object Object { get; protected set; } Property Value Object Implements IWrapper.Object Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.BaseGlobalSettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.BaseGlobalSettingsWrapper.html",
    "title": "Class BaseGlobalSettingsWrapper | MCM Documentation",
    "keywords": "Class BaseGlobalSettingsWrapper Inheritance Object BaseSettings GlobalSettings BaseGlobalSettingsWrapper Inherited Members GlobalSettings.Cache BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public abstract class BaseGlobalSettingsWrapper : GlobalSettings, INotifyPropertyChanged, IWrapper Constructors BaseGlobalSettingsWrapper(Object) Declaration protected BaseGlobalSettingsWrapper(object object) Parameters Object object Properties Object Declaration public object Object { get; protected set; } Property Value Object Implements IWrapper.Object Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.EmptyGlobalSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.EmptyGlobalSettings.html",
    "title": "Class EmptyGlobalSettings | MCM Documentation",
    "keywords": "Class EmptyGlobalSettings Inheritance Object BaseSettings GlobalSettings GlobalSettings < EmptyGlobalSettings > EmptyGlobalSettings Inherited Members GlobalSettings<EmptyGlobalSettings>.Instance GlobalSettings.Cache BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public sealed class EmptyGlobalSettings : GlobalSettings<EmptyGlobalSettings>, INotifyPropertyChanged Properties DisplayName The display name of the setting in the settings menu. Declaration public override string DisplayName { get; } Property Value String Overrides BaseSettings.DisplayName Id Unique identifier used to save to file. Make sure this is unique to your mod. Declaration public override string Id { get; } Property Value String Overrides BaseSettings.Id Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.ExternalGlobalSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.ExternalGlobalSettings.html",
    "title": "Class ExternalGlobalSettings | MCM Documentation",
    "keywords": "Class ExternalGlobalSettings Inheritance Object BaseSettings GlobalSettings FluentGlobalSettings ExternalGlobalSettings Inherited Members FluentGlobalSettings.Id FluentGlobalSettings.DisplayName FluentGlobalSettings.FolderName FluentGlobalSettings.SubFolder FluentGlobalSettings.FormatType FluentGlobalSettings.DiscoveryType FluentGlobalSettings.UIVersion FluentGlobalSettings.SubGroupDelimiter FluentGlobalSettings.PropertyChanged FluentGlobalSettings.SettingPropertyGroups FluentGlobalSettings.Register() FluentGlobalSettings.Unregister() FluentGlobalSettings.CreateNew() FluentGlobalSettings.GetAvailablePresets() GlobalSettings.Cache BaseSettings.SaveTriggered BaseSettings.OnPropertyChanged(String) BaseSettings.CopyAsNew() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public sealed class ExternalGlobalSettings : FluentGlobalSettings, INotifyPropertyChanged, IFluentSettings Methods CreateFromXmlStream(Stream, Func<IPropertyDefinitionBase, IRef>, PropertyChangedEventHandler) Declaration public static ExternalGlobalSettings CreateFromXmlStream(Stream xmlStream, Func<IPropertyDefinitionBase, IRef> assignRefDelegate, PropertyChangedEventHandler propertyChanged = null) Parameters Stream xmlStream Func < IPropertyDefinitionBase , IRef > assignRefDelegate PropertyChangedEventHandler propertyChanged Returns ExternalGlobalSettings Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.FluentGlobalSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.FluentGlobalSettings.html",
    "title": "Class FluentGlobalSettings | MCM Documentation",
    "keywords": "Class FluentGlobalSettings Inheritance Object BaseSettings GlobalSettings FluentGlobalSettings BaseFluentGlobalSettingsWrapper ExternalGlobalSettings Inherited Members GlobalSettings.Cache BaseSettings.SaveTriggered BaseSettings.OnPropertyChanged(String) BaseSettings.CopyAsNew() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public class FluentGlobalSettings : GlobalSettings, INotifyPropertyChanged, IFluentSettings Constructors FluentGlobalSettings(String, String, String, String, String, Int32, Char, PropertyChangedEventHandler, IEnumerable<SettingsPropertyGroupDefinition>, Dictionary<String, ISettingsPresetBuilder>) Declaration public FluentGlobalSettings(string id, string displayName, string folderName, string subFolder, string format, int uiVersion, char subGroupDelimiter, PropertyChangedEventHandler onPropertyChanged, IEnumerable<SettingsPropertyGroupDefinition> settingPropertyGroups, Dictionary<string, ISettingsPresetBuilder> presets) Parameters String id String displayName String folderName String subFolder String format Int32 uiVersion Char subGroupDelimiter PropertyChangedEventHandler onPropertyChanged IEnumerable < SettingsPropertyGroupDefinition > settingPropertyGroups Dictionary < String , ISettingsPresetBuilder > presets Properties DiscoveryType Declaration public override string DiscoveryType { get; } Property Value String Overrides BaseSettings.DiscoveryType DisplayName The display name of the setting in the settings menu. Declaration public sealed override string DisplayName { get; } Property Value String Overrides BaseSettings.DisplayName FolderName Declaration public sealed override string FolderName { get; } Property Value String Overrides BaseSettings.FolderName FormatType Declaration public sealed override string FormatType { get; } Property Value String Overrides BaseSettings.FormatType Id Unique identifier used to save to file. Make sure this is unique to your mod. Declaration public sealed override string Id { get; } Property Value String Overrides BaseSettings.Id SettingPropertyGroups Declaration public List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List < SettingsPropertyGroupDefinition > Implements IFluentSettings.SettingPropertyGroups SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. Declaration public sealed override string SubFolder { get; } Property Value String Overrides BaseSettings.SubFolder SubGroupDelimiter Declaration public sealed override char SubGroupDelimiter { get; } Property Value Char Overrides BaseSettings.SubGroupDelimiter UIVersion Declaration public sealed override int UIVersion { get; } Property Value Int32 Overrides BaseSettings.UIVersion Methods CreateNew() Declaration protected sealed override BaseSettings CreateNew() Returns BaseSettings Overrides BaseSettings.CreateNew() GetAvailablePresets() Declaration public sealed override IDictionary<string, Func<BaseSettings>> GetAvailablePresets() Returns IDictionary < String , Func < BaseSettings >> Overrides BaseSettings.GetAvailablePresets() Register() Declaration public void Register() Unregister() Declaration public void Unregister() Events PropertyChanged Declaration public sealed override event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Overrides BaseSettings.PropertyChanged Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.GlobalSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.GlobalSettings.html",
    "title": "Class GlobalSettings | MCM Documentation",
    "keywords": "Class GlobalSettings Inheritance Object BaseSettings GlobalSettings BaseGlobalSettingsWrapper FluentGlobalSettings GlobalSettings<T> Inherited Members BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public abstract class GlobalSettings : BaseSettings, INotifyPropertyChanged Fields Cache Declaration protected static readonly ConcurrentDictionary<Type, string> Cache Field Value ConcurrentDictionary < Type , String > Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.GlobalSettings-1.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.GlobalSettings-1.html",
    "title": "Class GlobalSettings<T> | MCM Documentation",
    "keywords": "Class GlobalSettings<T> Inheritance Object BaseSettings GlobalSettings GlobalSettings<T> AttributeGlobalSettings<T> EmptyGlobalSettings Inherited Members GlobalSettings.Cache BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.FormatType BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.Global Assembly : MCMv4.dll Syntax public abstract class GlobalSettings<T> : GlobalSettings, INotifyPropertyChanged where T : GlobalSettings, new() Type Parameters T Properties Instance Declaration public static T Instance { get; } Property Value T Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.Global.html": {
    "href": "api/MCM.Abstractions.Settings.Base.Global.html",
    "title": "Namespace MCM.Abstractions.Settings.Base.Global | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Base.Global Classes AttributeGlobalSettings<T> BaseFluentGlobalSettingsWrapper BaseGlobalSettingsWrapper EmptyGlobalSettings ExternalGlobalSettings FluentGlobalSettings GlobalSettings GlobalSettings<T>"
  },
  "api/MCM.Abstractions.Settings.Base.html": {
    "href": "api/MCM.Abstractions.Settings.Base.html",
    "title": "Namespace MCM.Abstractions.Settings.Base | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Base Classes BaseSettings Interfaces IFluentSettings"
  },
  "api/MCM.Abstractions.Settings.Base.IFluentSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.IFluentSettings.html",
    "title": "Interface IFluentSettings | MCM Documentation",
    "keywords": "Interface IFluentSettings Namespace : MCM.Abstractions.Settings.Base Assembly : MCMv4.dll Syntax public interface IFluentSettings Properties SettingPropertyGroups Declaration List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List < SettingsPropertyGroupDefinition >"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.AttributePerSaveSettings-1.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.AttributePerSaveSettings-1.html",
    "title": "Class AttributePerSaveSettings<T> | MCM Documentation",
    "keywords": "Class AttributePerSaveSettings<T> Inheritance Object BaseSettings PerSaveSettings PerSaveSettings <T> AttributePerSaveSettings<T> Inherited Members PerSaveSettings<T>.Instance PerSaveSettings.Cache PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.PerSave Assembly : MCMv4.dll Syntax public abstract class AttributePerSaveSettings<T> : PerSaveSettings<T>, INotifyPropertyChanged where T : PerSaveSettings, new() Type Parameters T Properties DiscoveryType Declaration public sealed override string DiscoveryType { get; } Property Value String Overrides BaseSettings.DiscoveryType Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.BasePerSaveSettingsWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.BasePerSaveSettingsWrapper.html",
    "title": "Class BasePerSaveSettingsWrapper | MCM Documentation",
    "keywords": "Class BasePerSaveSettingsWrapper Inheritance Object BaseSettings PerSaveSettings BasePerSaveSettingsWrapper Inherited Members PerSaveSettings.Cache PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.DiscoveryType BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.PerSave Assembly : MCMv4.dll Syntax public abstract class BasePerSaveSettingsWrapper : PerSaveSettings, INotifyPropertyChanged, IWrapper Constructors BasePerSaveSettingsWrapper(Object) Declaration protected BasePerSaveSettingsWrapper(object object) Parameters Object object Properties DisplayName The display name of the setting in the settings menu. Declaration public override string DisplayName { get; } Property Value String Overrides BaseSettings.DisplayName FolderName Declaration public override string FolderName { get; } Property Value String Overrides BaseSettings.FolderName Id Unique identifier used to save to file. Make sure this is unique to your mod. Declaration public override string Id { get; } Property Value String Overrides BaseSettings.Id Object Declaration public object Object { get; protected set; } Property Value Object Implements IWrapper.Object SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. Declaration public override string SubFolder { get; } Property Value String Overrides BaseSettings.SubFolder SubGroupDelimiter Declaration public override char SubGroupDelimiter { get; } Property Value Char Overrides BaseSettings.SubGroupDelimiter UIVersion Declaration public override int UIVersion { get; } Property Value Int32 Overrides BaseSettings.UIVersion Methods OnPropertyChanged(String) Declaration public override void OnPropertyChanged(string propertyName = null) Parameters String propertyName Overrides BaseSettings.OnPropertyChanged(String) Events PropertyChanged Declaration public override event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Overrides BaseSettings.PropertyChanged Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.EmptyPerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.EmptyPerSaveSettings.html",
    "title": "Class EmptyPerSaveSettings | MCM Documentation",
    "keywords": "Class EmptyPerSaveSettings Inheritance Object BaseSettings PerSaveSettings PerSaveSettings < EmptyPerSaveSettings > EmptyPerSaveSettings Inherited Members PerSaveSettings<EmptyPerSaveSettings>.Instance PerSaveSettings.Cache PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.PerSave Assembly : MCMv4.dll Syntax public sealed class EmptyPerSaveSettings : PerSaveSettings<EmptyPerSaveSettings>, INotifyPropertyChanged Properties DisplayName The display name of the setting in the settings menu. Declaration public override string DisplayName { get; } Property Value String Overrides BaseSettings.DisplayName Id Unique identifier used to save to file. Make sure this is unique to your mod. Declaration public override string Id { get; } Property Value String Overrides BaseSettings.Id Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.ExternalPerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.ExternalPerSaveSettings.html",
    "title": "Class ExternalPerSaveSettings | MCM Documentation",
    "keywords": "Class ExternalPerSaveSettings Inheritance Object BaseSettings PerSaveSettings FluentPerSaveSettings ExternalPerSaveSettings Inherited Members FluentPerSaveSettings.Id FluentPerSaveSettings.DisplayName FluentPerSaveSettings.FolderName FluentPerSaveSettings.SubFolder FluentPerSaveSettings.DiscoveryType FluentPerSaveSettings.UIVersion FluentPerSaveSettings.SubGroupDelimiter FluentPerSaveSettings.PropertyChanged FluentPerSaveSettings.SettingPropertyGroups FluentPerSaveSettings.Register() FluentPerSaveSettings.Unregister() FluentPerSaveSettings.CreateNew() FluentPerSaveSettings.GetAvailablePresets() PerSaveSettings.Cache PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.OnPropertyChanged(String) BaseSettings.CopyAsNew() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.PerSave Assembly : MCMv4.dll Syntax public sealed class ExternalPerSaveSettings : FluentPerSaveSettings, INotifyPropertyChanged, IFluentSettings Methods CreateFromXmlStream(Stream, Func<IPropertyDefinitionBase, IRef>, PropertyChangedEventHandler) Declaration public static ExternalPerSaveSettings CreateFromXmlStream(Stream xmlStream, Func<IPropertyDefinitionBase, IRef> assignRefDelegate, PropertyChangedEventHandler propertyChanged = null) Parameters Stream xmlStream Func < IPropertyDefinitionBase , IRef > assignRefDelegate PropertyChangedEventHandler propertyChanged Returns ExternalPerSaveSettings Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.FluentPerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.FluentPerSaveSettings.html",
    "title": "Class FluentPerSaveSettings | MCM Documentation",
    "keywords": "Class FluentPerSaveSettings Inheritance Object BaseSettings PerSaveSettings FluentPerSaveSettings ExternalPerSaveSettings Inherited Members PerSaveSettings.Cache PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.OnPropertyChanged(String) BaseSettings.CopyAsNew() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.PerSave Assembly : MCMv4.dll Syntax public class FluentPerSaveSettings : PerSaveSettings, INotifyPropertyChanged, IFluentSettings Constructors FluentPerSaveSettings(String, String, String, String, Int32, Char, PropertyChangedEventHandler, IEnumerable<SettingsPropertyGroupDefinition>, Dictionary<String, ISettingsPresetBuilder>) Declaration public FluentPerSaveSettings(string id, string displayName, string folderName, string subFolder, int uiVersion, char subGroupDelimiter, PropertyChangedEventHandler onPropertyChanged, IEnumerable<SettingsPropertyGroupDefinition> settingPropertyGroups, Dictionary<string, ISettingsPresetBuilder> presets) Parameters String id String displayName String folderName String subFolder Int32 uiVersion Char subGroupDelimiter PropertyChangedEventHandler onPropertyChanged IEnumerable < SettingsPropertyGroupDefinition > settingPropertyGroups Dictionary < String , ISettingsPresetBuilder > presets Properties DiscoveryType Declaration public override string DiscoveryType { get; } Property Value String Overrides BaseSettings.DiscoveryType DisplayName The display name of the setting in the settings menu. Declaration public sealed override string DisplayName { get; } Property Value String Overrides BaseSettings.DisplayName FolderName Declaration public sealed override string FolderName { get; } Property Value String Overrides BaseSettings.FolderName Id Unique identifier used to save to file. Make sure this is unique to your mod. Declaration public sealed override string Id { get; } Property Value String Overrides BaseSettings.Id SettingPropertyGroups Declaration public List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List < SettingsPropertyGroupDefinition > Implements IFluentSettings.SettingPropertyGroups SubFolder If you want this settings file stored inside a subfolder, set this to the name of the subfolder. Declaration public sealed override string SubFolder { get; } Property Value String Overrides BaseSettings.SubFolder SubGroupDelimiter Declaration public sealed override char SubGroupDelimiter { get; } Property Value Char Overrides BaseSettings.SubGroupDelimiter UIVersion Declaration public sealed override int UIVersion { get; } Property Value Int32 Overrides BaseSettings.UIVersion Methods CreateNew() Declaration protected override BaseSettings CreateNew() Returns BaseSettings Overrides BaseSettings.CreateNew() GetAvailablePresets() Declaration public sealed override IDictionary<string, Func<BaseSettings>> GetAvailablePresets() Returns IDictionary < String , Func < BaseSettings >> Overrides BaseSettings.GetAvailablePresets() Register() Declaration public void Register() Unregister() Declaration public void Unregister() Events PropertyChanged Declaration public sealed override event PropertyChangedEventHandler PropertyChanged Event Type PropertyChangedEventHandler Overrides BaseSettings.PropertyChanged Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.html",
    "title": "Namespace MCM.Abstractions.Settings.Base.PerSave | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Base.PerSave Classes AttributePerSaveSettings<T> BasePerSaveSettingsWrapper EmptyPerSaveSettings ExternalPerSaveSettings FluentPerSaveSettings PerSaveSettings PerSaveSettings<T>"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.PerSaveSettings.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.PerSaveSettings.html",
    "title": "Class PerSaveSettings | MCM Documentation",
    "keywords": "Class PerSaveSettings Inheritance Object BaseSettings PerSaveSettings BasePerSaveSettingsWrapper FluentPerSaveSettings PerSaveSettings<T> Inherited Members BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.PerSave Assembly : MCMv4.dll Syntax public abstract class PerSaveSettings : BaseSettings, INotifyPropertyChanged Fields Cache Declaration protected static readonly ConcurrentDictionary<Type, string> Cache Field Value ConcurrentDictionary < Type , String > Properties FormatType Declaration public sealed override string FormatType { get; } Property Value String Overrides BaseSettings.FormatType Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Base.PerSave.PerSaveSettings-1.html": {
    "href": "api/MCM.Abstractions.Settings.Base.PerSave.PerSaveSettings-1.html",
    "title": "Class PerSaveSettings<T> | MCM Documentation",
    "keywords": "Class PerSaveSettings<T> Inheritance Object BaseSettings PerSaveSettings PerSaveSettings<T> AttributePerSaveSettings<T> EmptyPerSaveSettings Inherited Members PerSaveSettings.Cache PerSaveSettings.FormatType BaseSettings.SaveTriggered BaseSettings.PropertyChanged BaseSettings.Id BaseSettings.DisplayName BaseSettings.FolderName BaseSettings.SubFolder BaseSettings.DiscoveryType BaseSettings.UIVersion BaseSettings.SubGroupDelimiter BaseSettings.OnPropertyChanged(String) BaseSettings.CreateNew() BaseSettings.CopyAsNew() BaseSettings.GetAvailablePresets() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Base.PerSave Assembly : MCMv4.dll Syntax public abstract class PerSaveSettings<T> : PerSaveSettings, INotifyPropertyChanged where T : PerSaveSettings, new() Type Parameters T Properties Instance Declaration public static T Instance { get; } Property Value T Extension Methods BaseSettingsExtensions.GetSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetUnsortedSettingPropertyGroups(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyDefinitions(BaseSettings) BaseSettingsExtensions.GetAllSettingPropertyGroupDefinitions(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Containers.BaseSettingsContainer-1.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.BaseSettingsContainer-1.html",
    "title": "Class BaseSettingsContainer<TSettings> | MCM Documentation",
    "keywords": "Class BaseSettingsContainer<TSettings> Inheritance Object BaseSettingsContainer<TSettings> BaseGlobalSettingsContainer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Containers Assembly : MCMv4.dll Syntax public abstract class BaseSettingsContainer<TSettings> : ISettingsContainer where TSettings : BaseSettings Type Parameters TSettings Properties CreateModSettingsDefinitions Declaration public virtual List<SettingsDefinition> CreateModSettingsDefinitions { get; } Property Value List < SettingsDefinition > Implements ISettingsContainer.CreateModSettingsDefinitions LoadedSettings Declaration protected virtual Dictionary<string, TSettings> LoadedSettings { get; } Property Value Dictionary < String , TSettings> RootFolder Declaration protected virtual string RootFolder { get; } Property Value String Methods GetSettings(String) Declaration public virtual BaseSettings GetSettings(string id) Parameters String id Returns BaseSettings Implements ISettingsContainer.GetSettings(String) OverrideSettings(BaseSettings) Declaration public virtual bool OverrideSettings(BaseSettings settings) Parameters BaseSettings settings Returns Boolean Implements ISettingsContainer.OverrideSettings(BaseSettings) RegisterSettings(TSettings) Declaration protected virtual void RegisterSettings(TSettings settings) Parameters TSettings settings ResetSettings(BaseSettings) Declaration public virtual bool ResetSettings(BaseSettings settings) Parameters BaseSettings settings Returns Boolean Implements ISettingsContainer.ResetSettings(BaseSettings) SaveSettings(BaseSettings) Declaration public virtual bool SaveSettings(BaseSettings settings) Parameters BaseSettings settings Returns Boolean Implements ISettingsContainer.SaveSettings(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Containers.Global.BaseGlobalSettingsContainer.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.Global.BaseGlobalSettingsContainer.html",
    "title": "Class BaseGlobalSettingsContainer | MCM Documentation",
    "keywords": "Class BaseGlobalSettingsContainer Inheritance Object BaseSettingsContainer < GlobalSettings > BaseGlobalSettingsContainer Inherited Members BaseSettingsContainer<GlobalSettings>.LoadedSettings BaseSettingsContainer<GlobalSettings>.CreateModSettingsDefinitions BaseSettingsContainer<GlobalSettings>.RegisterSettings(GlobalSettings) BaseSettingsContainer<GlobalSettings>.GetSettings(String) BaseSettingsContainer<GlobalSettings>.SaveSettings(BaseSettings) BaseSettingsContainer<GlobalSettings>.OverrideSettings(BaseSettings) BaseSettingsContainer<GlobalSettings>.ResetSettings(BaseSettings) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Containers.Global Assembly : MCMv4.dll Syntax public abstract class BaseGlobalSettingsContainer : BaseSettingsContainer<GlobalSettings>, IGlobalSettingsContainer, ISettingsContainer Constructors BaseGlobalSettingsContainer() Declaration protected BaseGlobalSettingsContainer() Properties RootFolder Declaration protected override string RootFolder { get; } Property Value String Overrides MCM.Abstractions.Settings.Containers.BaseSettingsContainer<MCM.Abstractions.Settings.Base.Global.GlobalSettings>.RootFolder"
  },
  "api/MCM.Abstractions.Settings.Containers.Global.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.Global.html",
    "title": "Namespace MCM.Abstractions.Settings.Containers.Global | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Containers.Global Classes BaseGlobalSettingsContainer Interfaces IFluentGlobalSettingsContainer IGlobalSettingsContainer"
  },
  "api/MCM.Abstractions.Settings.Containers.Global.IFluentGlobalSettingsContainer.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.Global.IFluentGlobalSettingsContainer.html",
    "title": "Interface IFluentGlobalSettingsContainer | MCM Documentation",
    "keywords": "Interface IFluentGlobalSettingsContainer Inherited Members ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Abstractions.Settings.Containers.Global Assembly : MCMv4.dll Syntax public interface IFluentGlobalSettingsContainer : IGlobalSettingsContainer, ISettingsContainer Methods Register(FluentGlobalSettings) Declaration void Register(FluentGlobalSettings settings) Parameters FluentGlobalSettings settings Unregister(FluentGlobalSettings) Declaration void Unregister(FluentGlobalSettings settings) Parameters FluentGlobalSettings settings"
  },
  "api/MCM.Abstractions.Settings.Containers.Global.IGlobalSettingsContainer.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.Global.IGlobalSettingsContainer.html",
    "title": "Interface IGlobalSettingsContainer | MCM Documentation",
    "keywords": "Interface IGlobalSettingsContainer Inherited Members ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Abstractions.Settings.Containers.Global Assembly : MCMv4.dll Syntax public interface IGlobalSettingsContainer : ISettingsContainer"
  },
  "api/MCM.Abstractions.Settings.Containers.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.html",
    "title": "Namespace MCM.Abstractions.Settings.Containers | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Containers Classes BaseSettingsContainer<TSettings> Interfaces ISettingsContainer"
  },
  "api/MCM.Abstractions.Settings.Containers.ISettingsContainer.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.ISettingsContainer.html",
    "title": "Interface ISettingsContainer | MCM Documentation",
    "keywords": "Interface ISettingsContainer Namespace : MCM.Abstractions.Settings.Containers Assembly : MCMv4.dll Syntax public interface ISettingsContainer Properties CreateModSettingsDefinitions Declaration List<SettingsDefinition> CreateModSettingsDefinitions { get; } Property Value List < SettingsDefinition > Methods GetSettings(String) Declaration BaseSettings GetSettings(string id) Parameters String id Returns BaseSettings OverrideSettings(BaseSettings) Declaration bool OverrideSettings(BaseSettings settings) Parameters BaseSettings settings Returns Boolean ResetSettings(BaseSettings) Declaration bool ResetSettings(BaseSettings settings) Parameters BaseSettings settings Returns Boolean SaveSettings(BaseSettings) Declaration bool SaveSettings(BaseSettings settings) Parameters BaseSettings settings Returns Boolean"
  },
  "api/MCM.Abstractions.Settings.Containers.PerSave.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.PerSave.html",
    "title": "Namespace MCM.Abstractions.Settings.Containers.PerSave | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Containers.PerSave Interfaces IFluentPerSaveSettingsContainer IPerSaveSettingsContainer"
  },
  "api/MCM.Abstractions.Settings.Containers.PerSave.IFluentPerSaveSettingsContainer.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.PerSave.IFluentPerSaveSettingsContainer.html",
    "title": "Interface IFluentPerSaveSettingsContainer | MCM Documentation",
    "keywords": "Interface IFluentPerSaveSettingsContainer Inherited Members IPerSaveSettingsContainer.OnGameStarted(Game) IPerSaveSettingsContainer.LoadSettings() IPerSaveSettingsContainer.OnGameEnded(Game) ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Abstractions.Settings.Containers.PerSave Assembly : MCMv4.dll Syntax public interface IFluentPerSaveSettingsContainer : IPerSaveSettingsContainer, ISettingsContainer Methods Register(FluentPerSaveSettings) Declaration void Register(FluentPerSaveSettings settings) Parameters FluentPerSaveSettings settings Unregister(FluentPerSaveSettings) Declaration void Unregister(FluentPerSaveSettings settings) Parameters FluentPerSaveSettings settings"
  },
  "api/MCM.Abstractions.Settings.Containers.PerSave.IPerSaveSettingsContainer.html": {
    "href": "api/MCM.Abstractions.Settings.Containers.PerSave.IPerSaveSettingsContainer.html",
    "title": "Interface IPerSaveSettingsContainer | MCM Documentation",
    "keywords": "Interface IPerSaveSettingsContainer Inherited Members ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Abstractions.Settings.Containers.PerSave Assembly : MCMv4.dll Syntax public interface IPerSaveSettingsContainer : ISettingsContainer Methods LoadSettings() Declaration void LoadSettings() OnGameEnded(Game) Declaration void OnGameEnded(Game game) Parameters Game game OnGameStarted(Game) Declaration void OnGameStarted(Game game) Parameters Game game"
  },
  "api/MCM.Abstractions.Settings.Definitions.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.html",
    "title": "Namespace MCM.Abstractions.Settings.Definitions | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Definitions Interfaces IPropertyDefinitionBase IPropertyDefinitionBool IPropertyDefinitionDropdown IPropertyDefinitionGroupToggle IPropertyDefinitionText IPropertyDefinitionWithActionFormat IPropertyDefinitionWithCustomFormatter IPropertyDefinitionWithEditableMinMax IPropertyDefinitionWithFormat IPropertyDefinitionWithId IPropertyDefinitionWithMinMax IPropertyGroupDefinition"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionBase.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionBase.html",
    "title": "Interface IPropertyDefinitionBase | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionBase Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionBase Properties DisplayName The display name of the setting in the settings menu. Declaration string DisplayName { get; } Property Value String HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. Declaration string HintText { get; } Property Value String Order Require restart of the game if the value is changed. Declaration int Order { get; } Property Value Int32 RequireRestart Require restart of the game if the value is changed. Declaration bool RequireRestart { get; } Property Value Boolean"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionBool.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionBool.html",
    "title": "Interface IPropertyDefinitionBool | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionBool Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionBool : IPropertyDefinitionBase"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionDropdown.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionDropdown.html",
    "title": "Interface IPropertyDefinitionDropdown | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionDropdown Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionDropdown : IPropertyDefinitionBase Properties SelectedIndex Declaration int SelectedIndex { get; } Property Value Int32"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionGroupToggle.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionGroupToggle.html",
    "title": "Interface IPropertyDefinitionGroupToggle | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionGroupToggle Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionGroupToggle : IPropertyDefinitionBase Properties IsToggle Declaration bool IsToggle { get; } Property Value Boolean"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionText.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionText.html",
    "title": "Interface IPropertyDefinitionText | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionText Inherited Members IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionText : IPropertyDefinitionBase"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithActionFormat.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithActionFormat.html",
    "title": "Interface IPropertyDefinitionWithActionFormat | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionWithActionFormat Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionWithActionFormat Properties ValueFormatFunc Declaration Func<object, string> ValueFormatFunc { get; } Property Value Func < Object , String >"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithCustomFormatter.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithCustomFormatter.html",
    "title": "Interface IPropertyDefinitionWithCustomFormatter | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionWithCustomFormatter Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionWithCustomFormatter Properties CustomFormatter Declaration Type CustomFormatter { get; } Property Value Type"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithEditableMinMax.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithEditableMinMax.html",
    "title": "Interface IPropertyDefinitionWithEditableMinMax | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionWithEditableMinMax Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionWithEditableMinMax Properties EditableMaxValue Declaration decimal EditableMaxValue { get; } Property Value Decimal EditableMinValue Declaration decimal EditableMinValue { get; } Property Value Decimal"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithFormat.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithFormat.html",
    "title": "Interface IPropertyDefinitionWithFormat | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionWithFormat Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionWithFormat Properties ValueFormat The format in which the slider's value will be displayed in. Declaration string ValueFormat { get; } Property Value String"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithId.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithId.html",
    "title": "Interface IPropertyDefinitionWithId | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionWithId Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionWithId Properties Id Declaration string Id { get; } Property Value String"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithMinMax.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyDefinitionWithMinMax.html",
    "title": "Interface IPropertyDefinitionWithMinMax | MCM Documentation",
    "keywords": "Interface IPropertyDefinitionWithMinMax Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyDefinitionWithMinMax Properties MaxValue The maximum value the setting can be set to. Used by the slider control. Declaration decimal MaxValue { get; } Property Value Decimal MinValue The minimum value the setting can be set to. Used by the slider control. Declaration decimal MinValue { get; } Property Value Decimal"
  },
  "api/MCM.Abstractions.Settings.Definitions.IPropertyGroupDefinition.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.IPropertyGroupDefinition.html",
    "title": "Interface IPropertyGroupDefinition | MCM Documentation",
    "keywords": "Interface IPropertyGroupDefinition Namespace : MCM.Abstractions.Settings.Definitions Assembly : MCMv4.dll Syntax public interface IPropertyGroupDefinition Properties GroupName The name of the settings group. Includes SubGroup notation if present. Declaration string GroupName { get; } Property Value String GroupOrder Declaration int GroupOrder { get; } Property Value Int32"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.AttributePropertyDefinitionGroupToggleWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.AttributePropertyDefinitionGroupToggleWrapper.html",
    "title": "Class AttributePropertyDefinitionGroupToggleWrapper | MCM Documentation",
    "keywords": "Class AttributePropertyDefinitionGroupToggleWrapper Inheritance Object BasePropertyDefinitionWrapper AttributePropertyDefinitionGroupToggleWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class AttributePropertyDefinitionGroupToggleWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Constructors AttributePropertyDefinitionGroupToggleWrapper(Object) Declaration public AttributePropertyDefinitionGroupToggleWrapper(object object) Parameters Object object Properties IsToggle Declaration public bool IsToggle { get; } Property Value Boolean Implements IPropertyDefinitionGroupToggle.IsToggle"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.BasePropertyDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.BasePropertyDefinitionWrapper.html",
    "title": "Class BasePropertyDefinitionWrapper | MCM Documentation",
    "keywords": "Class BasePropertyDefinitionWrapper Inheritance Object BasePropertyDefinitionWrapper AttributePropertyDefinitionGroupToggleWrapper PropertyDefinitionBoolWrapper PropertyDefinitionDropdownWrapper PropertyDefinitionGroupToggleWrapper PropertyDefinitionTextWrapper PropertyDefinitionWithActionFormatWrapper PropertyDefinitionWithCustomFormatterWrapper PropertyDefinitionWithEditableMinMaxWrapper PropertyDefinitionWithFormatWrapper PropertyDefinitionWithIdWrapper PropertyDefinitionWithMinMaxWrapper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public abstract class BasePropertyDefinitionWrapper : IPropertyDefinitionBase Constructors BasePropertyDefinitionWrapper(Object) Declaration protected BasePropertyDefinitionWrapper(object object) Parameters Object object Properties DisplayName The display name of the setting in the settings menu. Declaration public string DisplayName { get; } Property Value String Implements IPropertyDefinitionBase.DisplayName HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. Declaration public string HintText { get; } Property Value String Implements IPropertyDefinitionBase.HintText Order Require restart of the game if the value is changed. Declaration public int Order { get; } Property Value Int32 Implements IPropertyDefinitionBase.Order RequireRestart Require restart of the game if the value is changed. Declaration public bool RequireRestart { get; } Property Value Boolean Implements IPropertyDefinitionBase.RequireRestart"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.html",
    "title": "Namespace MCM.Abstractions.Settings.Definitions.Wrapper | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Definitions.Wrapper Classes AttributePropertyDefinitionGroupToggleWrapper BasePropertyDefinitionWrapper PropertyDefinitionBoolWrapper PropertyDefinitionDropdownWrapper PropertyDefinitionGroupToggleWrapper PropertyDefinitionTextWrapper PropertyDefinitionWithActionFormatWrapper PropertyDefinitionWithCustomFormatterWrapper PropertyDefinitionWithEditableMinMaxWrapper PropertyDefinitionWithFormatWrapper PropertyDefinitionWithIdWrapper PropertyDefinitionWithMinMaxWrapper PropertyGroupDefinitionWrapper"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionBoolWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionBoolWrapper.html",
    "title": "Class PropertyDefinitionBoolWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionBoolWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionBoolWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionBoolWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBool, IPropertyDefinitionBase Constructors PropertyDefinitionBoolWrapper(Object) Declaration public PropertyDefinitionBoolWrapper(object object) Parameters Object object"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionDropdownWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionDropdownWrapper.html",
    "title": "Class PropertyDefinitionDropdownWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionDropdownWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionDropdownWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionDropdownWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionDropdown, IPropertyDefinitionBase Constructors PropertyDefinitionDropdownWrapper(Object) Declaration public PropertyDefinitionDropdownWrapper(object object) Parameters Object object Properties SelectedIndex Declaration public int SelectedIndex { get; } Property Value Int32 Implements IPropertyDefinitionDropdown.SelectedIndex"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionGroupToggleWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionGroupToggleWrapper.html",
    "title": "Class PropertyDefinitionGroupToggleWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionGroupToggleWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionGroupToggleWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionGroupToggleWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Constructors PropertyDefinitionGroupToggleWrapper(Object) Declaration public PropertyDefinitionGroupToggleWrapper(object object) Parameters Object object Properties IsToggle Declaration public bool IsToggle { get; } Property Value Boolean Implements IPropertyDefinitionGroupToggle.IsToggle"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionTextWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionTextWrapper.html",
    "title": "Class PropertyDefinitionTextWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionTextWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionTextWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionTextWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionText, IPropertyDefinitionBase Constructors PropertyDefinitionTextWrapper(Object) Declaration public PropertyDefinitionTextWrapper(object object) Parameters Object object"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithActionFormatWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithActionFormatWrapper.html",
    "title": "Class PropertyDefinitionWithActionFormatWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionWithActionFormatWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionWithActionFormatWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionWithActionFormatWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithActionFormat Constructors PropertyDefinitionWithActionFormatWrapper(Object) Declaration public PropertyDefinitionWithActionFormatWrapper(object object) Parameters Object object Properties ValueFormatFunc Declaration public Func<object, string> ValueFormatFunc { get; } Property Value Func < Object , String > Implements IPropertyDefinitionWithActionFormat.ValueFormatFunc"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithCustomFormatterWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithCustomFormatterWrapper.html",
    "title": "Class PropertyDefinitionWithCustomFormatterWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionWithCustomFormatterWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionWithCustomFormatterWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionWithCustomFormatterWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithCustomFormatter Constructors PropertyDefinitionWithCustomFormatterWrapper(Object) Declaration public PropertyDefinitionWithCustomFormatterWrapper(object object) Parameters Object object Properties CustomFormatter Declaration public Type CustomFormatter { get; } Property Value Type Implements IPropertyDefinitionWithCustomFormatter.CustomFormatter"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithEditableMinMaxWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithEditableMinMaxWrapper.html",
    "title": "Class PropertyDefinitionWithEditableMinMaxWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionWithEditableMinMaxWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionWithEditableMinMaxWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionWithEditableMinMaxWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithEditableMinMax Constructors PropertyDefinitionWithEditableMinMaxWrapper(Object) Declaration public PropertyDefinitionWithEditableMinMaxWrapper(object object) Parameters Object object Properties EditableMaxValue Declaration public decimal EditableMaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithEditableMinMax.EditableMaxValue EditableMinValue Declaration public decimal EditableMinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithEditableMinMax.EditableMinValue"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithFormatWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithFormatWrapper.html",
    "title": "Class PropertyDefinitionWithFormatWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionWithFormatWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionWithFormatWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionWithFormatWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithFormat Constructors PropertyDefinitionWithFormatWrapper(Object) Declaration public PropertyDefinitionWithFormatWrapper(object object) Parameters Object object Properties ValueFormat The format in which the slider's value will be displayed in. Declaration public string ValueFormat { get; } Property Value String Implements IPropertyDefinitionWithFormat.ValueFormat"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithIdWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithIdWrapper.html",
    "title": "Class PropertyDefinitionWithIdWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionWithIdWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionWithIdWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionWithIdWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithId Constructors PropertyDefinitionWithIdWrapper(Object) Declaration public PropertyDefinitionWithIdWrapper(object object) Parameters Object object Properties Id Declaration public string Id { get; } Property Value String Implements IPropertyDefinitionWithId.Id"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithMinMaxWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyDefinitionWithMinMaxWrapper.html",
    "title": "Class PropertyDefinitionWithMinMaxWrapper | MCM Documentation",
    "keywords": "Class PropertyDefinitionWithMinMaxWrapper Inheritance Object BasePropertyDefinitionWrapper PropertyDefinitionWithMinMaxWrapper Inherited Members BasePropertyDefinitionWrapper.DisplayName BasePropertyDefinitionWrapper.Order BasePropertyDefinitionWrapper.RequireRestart BasePropertyDefinitionWrapper.HintText Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyDefinitionWithMinMaxWrapper : BasePropertyDefinitionWrapper, IPropertyDefinitionBase, IPropertyDefinitionWithMinMax Constructors PropertyDefinitionWithMinMaxWrapper(Object) Declaration public PropertyDefinitionWithMinMaxWrapper(object object) Parameters Object object Properties MaxValue The maximum value the setting can be set to. Used by the slider control. Declaration public decimal MaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue The minimum value the setting can be set to. Used by the slider control. Declaration public decimal MinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue"
  },
  "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyGroupDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Wrapper.PropertyGroupDefinitionWrapper.html",
    "title": "Class PropertyGroupDefinitionWrapper | MCM Documentation",
    "keywords": "Class PropertyGroupDefinitionWrapper Inheritance Object PropertyGroupDefinitionWrapper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Wrapper Assembly : MCMv4.dll Syntax public sealed class PropertyGroupDefinitionWrapper : IPropertyGroupDefinition Constructors PropertyGroupDefinitionWrapper(Object) Declaration public PropertyGroupDefinitionWrapper(object object) Parameters Object object Properties GroupName The name of the settings group. Includes SubGroup notation if present. Declaration public string GroupName { get; } Property Value String Implements IPropertyGroupDefinition.GroupName GroupOrder Declaration public int GroupOrder { get; } Property Value Int32 Implements IPropertyGroupDefinition.GroupOrder"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.html",
    "title": "Namespace MCM.Abstractions.Settings.Definitions.Xml | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Definitions.Xml Classes PropertyBaseXmlModel PropertyBoolXmlModel PropertyDropdownXmlModel PropertyFloatingIntegerXmlModel PropertyGroupXmlModel PropertyIntegerXmlModel PropertyTextXmlModel SettingsXmlModel"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyBaseXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyBaseXmlModel.html",
    "title": "Class PropertyBaseXmlModel | MCM Documentation",
    "keywords": "Class PropertyBaseXmlModel Inheritance Object PropertyBaseXmlModel PropertyBoolXmlModel PropertyDropdownXmlModel PropertyFloatingIntegerXmlModel PropertyIntegerXmlModel PropertyTextXmlModel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public abstract class PropertyBaseXmlModel : IPropertyDefinitionBase, IPropertyDefinitionWithId Properties DisplayName Declaration public string DisplayName { get; set; } Property Value String Implements IPropertyDefinitionBase.DisplayName HintText Declaration public string HintText { get; set; } Property Value String Implements IPropertyDefinitionBase.HintText Id Declaration public string Id { get; set; } Property Value String Implements IPropertyDefinitionWithId.Id Order Declaration public int Order { get; set; } Property Value Int32 Implements IPropertyDefinitionBase.Order RequireRestart Declaration public bool RequireRestart { get; set; } Property Value Boolean Implements IPropertyDefinitionBase.RequireRestart"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyBoolXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyBoolXmlModel.html",
    "title": "Class PropertyBoolXmlModel | MCM Documentation",
    "keywords": "Class PropertyBoolXmlModel Inheritance Object PropertyBaseXmlModel PropertyBoolXmlModel Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public class PropertyBoolXmlModel : PropertyBaseXmlModel, IPropertyDefinitionWithId, IPropertyDefinitionBool, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase Properties IsToggle Declaration public bool IsToggle { get; set; } Property Value Boolean Implements IPropertyDefinitionGroupToggle.IsToggle"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyDropdownXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyDropdownXmlModel.html",
    "title": "Class PropertyDropdownXmlModel | MCM Documentation",
    "keywords": "Class PropertyDropdownXmlModel Inheritance Object PropertyBaseXmlModel PropertyDropdownXmlModel Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public class PropertyDropdownXmlModel : PropertyBaseXmlModel, IPropertyDefinitionWithId, IPropertyDefinitionDropdown, IPropertyDefinitionBase Properties SelectedIndex Declaration public int SelectedIndex { get; set; } Property Value Int32 Implements IPropertyDefinitionDropdown.SelectedIndex"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyFloatingIntegerXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyFloatingIntegerXmlModel.html",
    "title": "Class PropertyFloatingIntegerXmlModel | MCM Documentation",
    "keywords": "Class PropertyFloatingIntegerXmlModel Inheritance Object PropertyBaseXmlModel PropertyFloatingIntegerXmlModel Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public class PropertyFloatingIntegerXmlModel : PropertyBaseXmlModel, IPropertyDefinitionBase, IPropertyDefinitionWithId, IPropertyDefinitionWithMinMax Properties MaxValue Declaration public decimal MaxValue { get; set; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue Declaration public decimal MinValue { get; set; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyGroupXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyGroupXmlModel.html",
    "title": "Class PropertyGroupXmlModel | MCM Documentation",
    "keywords": "Class PropertyGroupXmlModel Inheritance Object PropertyGroupXmlModel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public class PropertyGroupXmlModel : IPropertyGroupDefinition Properties GroupName Declaration public string GroupName { get; set; } Property Value String Implements IPropertyGroupDefinition.GroupName GroupOrder Declaration public int GroupOrder { get; set; } Property Value Int32 Implements IPropertyGroupDefinition.GroupOrder Properties Declaration public List<PropertyBaseXmlModel> Properties { get; set; } Property Value List < PropertyBaseXmlModel >"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyIntegerXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyIntegerXmlModel.html",
    "title": "Class PropertyIntegerXmlModel | MCM Documentation",
    "keywords": "Class PropertyIntegerXmlModel Inheritance Object PropertyBaseXmlModel PropertyIntegerXmlModel Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public class PropertyIntegerXmlModel : PropertyBaseXmlModel, IPropertyDefinitionBase, IPropertyDefinitionWithId, IPropertyDefinitionWithMinMax Properties MaxValue Declaration public decimal MaxValue { get; set; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue Declaration public decimal MinValue { get; set; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyTextXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.PropertyTextXmlModel.html",
    "title": "Class PropertyTextXmlModel | MCM Documentation",
    "keywords": "Class PropertyTextXmlModel Inheritance Object PropertyBaseXmlModel PropertyTextXmlModel Inherited Members PropertyBaseXmlModel.Id PropertyBaseXmlModel.DisplayName PropertyBaseXmlModel.Order PropertyBaseXmlModel.HintText PropertyBaseXmlModel.RequireRestart Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public class PropertyTextXmlModel : PropertyBaseXmlModel, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionBase"
  },
  "api/MCM.Abstractions.Settings.Definitions.Xml.SettingsXmlModel.html": {
    "href": "api/MCM.Abstractions.Settings.Definitions.Xml.SettingsXmlModel.html",
    "title": "Class SettingsXmlModel | MCM Documentation",
    "keywords": "Class SettingsXmlModel Inheritance Object SettingsXmlModel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Definitions.Xml Assembly : MCMv4.dll Syntax [Serializable] public class SettingsXmlModel Properties DisplayName Declaration public string DisplayName { get; set; } Property Value String FolderName Declaration public string FolderName { get; } Property Value String FormatType Declaration public string FormatType { get; set; } Property Value String Groups Declaration public List<PropertyGroupXmlModel> Groups { get; set; } Property Value List < PropertyGroupXmlModel > Id Declaration public string Id { get; set; } Property Value String Properties Declaration public List<PropertyBaseXmlModel> Properties { get; set; } Property Value List < PropertyBaseXmlModel > SubFolder Declaration public string SubFolder { get; } Property Value String SubGroupDelimiter Declaration public string SubGroupDelimiter { get; set; } Property Value String UIVersion Declaration public int UIVersion { get; set; } Property Value Int32"
  },
  "api/MCM.Abstractions.Settings.Formats.html": {
    "href": "api/MCM.Abstractions.Settings.Formats.html",
    "title": "Namespace MCM.Abstractions.Settings.Formats | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Formats Classes MemorySettingsFormat NoneSettingsFormat Interfaces ISettingsFormat"
  },
  "api/MCM.Abstractions.Settings.Formats.ISettingsFormat.html": {
    "href": "api/MCM.Abstractions.Settings.Formats.ISettingsFormat.html",
    "title": "Interface ISettingsFormat | MCM Documentation",
    "keywords": "Interface ISettingsFormat Namespace : MCM.Abstractions.Settings.Formats Assembly : MCMv4.dll Syntax public interface ISettingsFormat Properties FormatTypes Declaration IEnumerable<string> FormatTypes { get; } Property Value IEnumerable < String > Methods Load(BaseSettings, String, String) Declaration BaseSettings Load(BaseSettings settings, string directoryPath, string filename) Parameters BaseSettings settings String directoryPath String filename Returns BaseSettings Save(BaseSettings, String, String) Declaration bool Save(BaseSettings settings, string directoryPath, string filename) Parameters BaseSettings settings String directoryPath String filename Returns Boolean"
  },
  "api/MCM.Abstractions.Settings.Formats.MemorySettingsFormat.html": {
    "href": "api/MCM.Abstractions.Settings.Formats.MemorySettingsFormat.html",
    "title": "Class MemorySettingsFormat | MCM Documentation",
    "keywords": "Class MemorySettingsFormat Inheritance Object MemorySettingsFormat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Formats Assembly : MCMv4.dll Syntax public sealed class MemorySettingsFormat : ISettingsFormat Properties FormatTypes Declaration public IEnumerable<string> FormatTypes { get; } Property Value IEnumerable < String > Implements ISettingsFormat.FormatTypes Methods Load(BaseSettings, String, String) Declaration public BaseSettings Load(BaseSettings settings, string directoryPath, string filename) Parameters BaseSettings settings String directoryPath String filename Returns BaseSettings Implements ISettingsFormat.Load(BaseSettings, String, String) Save(BaseSettings, String, String) Declaration public bool Save(BaseSettings settings, string directoryPath, string filename) Parameters BaseSettings settings String directoryPath String filename Returns Boolean Implements ISettingsFormat.Save(BaseSettings, String, String)"
  },
  "api/MCM.Abstractions.Settings.Formats.NoneSettingsFormat.html": {
    "href": "api/MCM.Abstractions.Settings.Formats.NoneSettingsFormat.html",
    "title": "Class NoneSettingsFormat | MCM Documentation",
    "keywords": "Class NoneSettingsFormat Inheritance Object NoneSettingsFormat Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Formats Assembly : MCMv4.dll Syntax public sealed class NoneSettingsFormat : ISettingsFormat Properties FormatTypes Declaration public IEnumerable<string> FormatTypes { get; } Property Value IEnumerable < String > Implements ISettingsFormat.FormatTypes Methods Load(BaseSettings, String, String) Declaration public BaseSettings Load(BaseSettings settings, string directoryPath, string filename) Parameters BaseSettings settings String directoryPath String filename Returns BaseSettings Implements ISettingsFormat.Load(BaseSettings, String, String) Save(BaseSettings, String, String) Declaration public bool Save(BaseSettings settings, string directoryPath, string filename) Parameters BaseSettings settings String directoryPath String filename Returns Boolean Implements ISettingsFormat.Save(BaseSettings, String, String)"
  },
  "api/MCM.Abstractions.Settings.html": {
    "href": "api/MCM.Abstractions.Settings.html",
    "title": "Namespace MCM.Abstractions.Settings | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings Enums SettingType"
  },
  "api/MCM.Abstractions.Settings.Models.html": {
    "href": "api/MCM.Abstractions.Settings.Models.html",
    "title": "Namespace MCM.Abstractions.Settings.Models | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Models Classes SettingsDefinition SettingsPropertyDefinition SettingsPropertyGroupDefinition Interfaces ISettingsPropertyDefinition"
  },
  "api/MCM.Abstractions.Settings.Models.ISettingsPropertyDefinition.html": {
    "href": "api/MCM.Abstractions.Settings.Models.ISettingsPropertyDefinition.html",
    "title": "Interface ISettingsPropertyDefinition | MCM Documentation",
    "keywords": "Interface ISettingsPropertyDefinition Inherited Members IPropertyDefinitionDropdown.SelectedIndex IPropertyDefinitionWithMinMax.MinValue IPropertyDefinitionWithMinMax.MaxValue IPropertyDefinitionWithEditableMinMax.EditableMinValue IPropertyDefinitionWithEditableMinMax.EditableMaxValue IPropertyDefinitionWithFormat.ValueFormat IPropertyDefinitionWithCustomFormatter.CustomFormatter IPropertyDefinitionWithId.Id IPropertyDefinitionGroupToggle.IsToggle IPropertyDefinitionBase.DisplayName IPropertyDefinitionBase.Order IPropertyDefinitionBase.RequireRestart IPropertyDefinitionBase.HintText IPropertyGroupDefinition.GroupName IPropertyGroupDefinition.GroupOrder Namespace : MCM.Abstractions.Settings.Models Assembly : MCMv4.dll Syntax public interface ISettingsPropertyDefinition : IPropertyDefinitionBool, IPropertyDefinitionDropdown, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithEditableMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase, IPropertyGroupDefinition Properties PropertyReference Declaration IRef PropertyReference { get; } Property Value IRef SettingType Declaration SettingType SettingType { get; } Property Value SettingType Methods Clone(Boolean) Declaration SettingsPropertyDefinition Clone(bool keepRefs = true) Parameters Boolean keepRefs Returns SettingsPropertyDefinition"
  },
  "api/MCM.Abstractions.Settings.Models.SettingsDefinition.html": {
    "href": "api/MCM.Abstractions.Settings.Models.SettingsDefinition.html",
    "title": "Class SettingsDefinition | MCM Documentation",
    "keywords": "Class SettingsDefinition Inheritance Object SettingsDefinition SettingsDefinitionWrapper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Models Assembly : MCMv4.dll Syntax public class SettingsDefinition Constructors SettingsDefinition(String) Declaration public SettingsDefinition(string id) Parameters String id SettingsDefinition(String, String, IEnumerable<SettingsPropertyDefinition>) Declaration public SettingsDefinition(string id, string displayName, IEnumerable<SettingsPropertyDefinition> settingsProperties) Parameters String id String displayName IEnumerable < SettingsPropertyDefinition > settingsProperties SettingsDefinition(String, String, List<SettingsPropertyGroupDefinition>) Declaration public SettingsDefinition(string id, string displayName, List<SettingsPropertyGroupDefinition> settingsPropertyGroups) Parameters String id String displayName List < SettingsPropertyGroupDefinition > settingsPropertyGroups Properties DisplayName Declaration public string DisplayName { get; } Property Value String SettingPropertyGroups Declaration public List<SettingsPropertyGroupDefinition> SettingPropertyGroups { get; } Property Value List < SettingsPropertyGroupDefinition > SettingsId Declaration public string SettingsId { get; } Property Value String"
  },
  "api/MCM.Abstractions.Settings.Models.SettingsPropertyDefinition.html": {
    "href": "api/MCM.Abstractions.Settings.Models.SettingsPropertyDefinition.html",
    "title": "Class SettingsPropertyDefinition | MCM Documentation",
    "keywords": "Class SettingsPropertyDefinition Inheritance Object SettingsPropertyDefinition Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Models Assembly : MCMv4.dll Syntax public sealed class SettingsPropertyDefinition : ISettingsPropertyDefinition, IPropertyDefinitionBool, IPropertyDefinitionDropdown, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithEditableMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase, IPropertyGroupDefinition Constructors SettingsPropertyDefinition(IPropertyDefinitionBase, IPropertyGroupDefinition, IRef, Char) Declaration public SettingsPropertyDefinition(IPropertyDefinitionBase propertyDefinition, IPropertyGroupDefinition propertyGroupDefinition, IRef propertyReference, char subGroupDelimiter) Parameters IPropertyDefinitionBase propertyDefinition IPropertyGroupDefinition propertyGroupDefinition IRef propertyReference Char subGroupDelimiter SettingsPropertyDefinition(IEnumerable<IPropertyDefinitionBase>, IPropertyGroupDefinition, IRef, Char) Declaration public SettingsPropertyDefinition(IEnumerable<IPropertyDefinitionBase> propertyDefinitions, IPropertyGroupDefinition propertyGroupDefinition, IRef propertyReference, char subGroupDelimiter) Parameters IEnumerable < IPropertyDefinitionBase > propertyDefinitions IPropertyGroupDefinition propertyGroupDefinition IRef propertyReference Char subGroupDelimiter Properties CustomFormatter Declaration public Type CustomFormatter { get; } Property Value Type Implements IPropertyDefinitionWithCustomFormatter.CustomFormatter DisplayName The display name of the setting in the settings menu. Declaration public string DisplayName { get; } Property Value String Implements IPropertyDefinitionBase.DisplayName EditableMaxValue Declaration public decimal EditableMaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithEditableMinMax.EditableMaxValue EditableMinValue Declaration public decimal EditableMinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithEditableMinMax.EditableMinValue GroupName The name of the settings group. Includes SubGroup notation if present. Declaration public string GroupName { get; } Property Value String Implements IPropertyGroupDefinition.GroupName GroupOrder Declaration public int GroupOrder { get; } Property Value Int32 Implements IPropertyGroupDefinition.GroupOrder HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. Declaration public string HintText { get; } Property Value String Implements IPropertyDefinitionBase.HintText Id Declaration public string Id { get; } Property Value String Implements IPropertyDefinitionWithId.Id IsToggle Declaration public bool IsToggle { get; } Property Value Boolean Implements IPropertyDefinitionGroupToggle.IsToggle MaxValue The maximum value the setting can be set to. Used by the slider control. Declaration public decimal MaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue The minimum value the setting can be set to. Used by the slider control. Declaration public decimal MinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue Order Require restart of the game if the value is changed. Declaration public int Order { get; } Property Value Int32 Implements IPropertyDefinitionBase.Order PropertyReference Declaration public IRef PropertyReference { get; } Property Value IRef Implements ISettingsPropertyDefinition.PropertyReference RequireRestart Require restart of the game if the value is changed. Declaration public bool RequireRestart { get; } Property Value Boolean Implements IPropertyDefinitionBase.RequireRestart SelectedIndex Declaration public int SelectedIndex { get; } Property Value Int32 Implements IPropertyDefinitionDropdown.SelectedIndex SettingType Declaration public SettingType SettingType { get; } Property Value SettingType Implements ISettingsPropertyDefinition.SettingType ValueFormat The format in which the slider's value will be displayed in. Declaration public string ValueFormat { get; } Property Value String Implements IPropertyDefinitionWithFormat.ValueFormat Methods Clone(Boolean) Declaration public SettingsPropertyDefinition Clone(bool keepRefs = true) Parameters Boolean keepRefs Returns SettingsPropertyDefinition Implements ISettingsPropertyDefinition.Clone(Boolean) ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "api/MCM.Abstractions.Settings.Models.SettingsPropertyGroupDefinition.html": {
    "href": "api/MCM.Abstractions.Settings.Models.SettingsPropertyGroupDefinition.html",
    "title": "Class SettingsPropertyGroupDefinition | MCM Documentation",
    "keywords": "Class SettingsPropertyGroupDefinition Inheritance Object SettingsPropertyGroupDefinition SettingsPropertyGroupDefinitionWrapper Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Models Assembly : MCMv4.dll Syntax public class SettingsPropertyGroupDefinition Constructors SettingsPropertyGroupDefinition(String, String, Int32) Declaration public SettingsPropertyGroupDefinition(string groupName, string groupNameOverride = \"\", int order = -1) Parameters String groupName String groupNameOverride Int32 order Fields _groupName Declaration protected readonly TextObject _groupName Field Value TextObject _groupNameOverride Declaration protected readonly TextObject _groupNameOverride Field Value TextObject DefaultGroup The default group used for settings that don't have a group explicitly set. Declaration public static readonly IPropertyGroupDefinition DefaultGroup Field Value IPropertyGroupDefinition DefaultGroupName The default group used for settings that don't have a group explicitly set. Declaration public static readonly string DefaultGroupName Field Value String settingProperties Declaration protected readonly List<ISettingsPropertyDefinition> settingProperties Field Value List < ISettingsPropertyDefinition > subGroups Declaration protected readonly List<SettingsPropertyGroupDefinition> subGroups Field Value List < SettingsPropertyGroupDefinition > Properties DisplayGroupName Declaration public TextObject DisplayGroupName { get; } Property Value TextObject GroupName Declaration public string GroupName { get; } Property Value String Order Declaration public int Order { get; } Property Value Int32 SettingProperties Declaration public IEnumerable<ISettingsPropertyDefinition> SettingProperties { get; } Property Value IEnumerable < ISettingsPropertyDefinition > SubGroups Declaration public IEnumerable<SettingsPropertyGroupDefinition> SubGroups { get; } Property Value IEnumerable < SettingsPropertyGroupDefinition > Methods Add(ISettingsPropertyDefinition) Declaration public void Add(ISettingsPropertyDefinition settingProp) Parameters ISettingsPropertyDefinition settingProp Add(SettingsPropertyGroupDefinition) Declaration public void Add(SettingsPropertyGroupDefinition settingProp) Parameters SettingsPropertyGroupDefinition settingProp Clone(Boolean) Declaration public SettingsPropertyGroupDefinition Clone(bool keepRefs = true) Parameters Boolean keepRefs Returns SettingsPropertyGroupDefinition GetGroup(String) Declaration public SettingsPropertyGroupDefinition GetGroup(string groupName) Parameters String groupName Returns SettingsPropertyGroupDefinition GetGroupFor(String) Declaration public SettingsPropertyGroupDefinition GetGroupFor(string groupName) Parameters String groupName Returns SettingsPropertyGroupDefinition ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "api/MCM.Abstractions.Settings.Models.Wrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Models.Wrapper.html",
    "title": "Namespace MCM.Abstractions.Settings.Models.Wrapper | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Models.Wrapper Classes SettingsDefinitionWrapper SettingsPropertyDefinitionWrapper SettingsPropertyGroupDefinitionWrapper"
  },
  "api/MCM.Abstractions.Settings.Models.Wrapper.SettingsDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Models.Wrapper.SettingsDefinitionWrapper.html",
    "title": "Class SettingsDefinitionWrapper | MCM Documentation",
    "keywords": "Class SettingsDefinitionWrapper Inheritance Object SettingsDefinition SettingsDefinitionWrapper Inherited Members SettingsDefinition.SettingsId SettingsDefinition.DisplayName SettingsDefinition.SettingPropertyGroups Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Models.Wrapper Assembly : MCMv4.dll Syntax public sealed class SettingsDefinitionWrapper : SettingsDefinition Constructors SettingsDefinitionWrapper(Object) Declaration public SettingsDefinitionWrapper(object object) Parameters Object object"
  },
  "api/MCM.Abstractions.Settings.Models.Wrapper.SettingsPropertyDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Models.Wrapper.SettingsPropertyDefinitionWrapper.html",
    "title": "Class SettingsPropertyDefinitionWrapper | MCM Documentation",
    "keywords": "Class SettingsPropertyDefinitionWrapper Inheritance Object SettingsPropertyDefinitionWrapper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Models.Wrapper Assembly : MCMv4.dll Syntax public sealed class SettingsPropertyDefinitionWrapper : ISettingsPropertyDefinition, IPropertyDefinitionBool, IPropertyDefinitionDropdown, IPropertyDefinitionWithMinMax, IPropertyDefinitionWithEditableMinMax, IPropertyDefinitionWithFormat, IPropertyDefinitionWithCustomFormatter, IPropertyDefinitionWithId, IPropertyDefinitionText, IPropertyDefinitionGroupToggle, IPropertyDefinitionBase, IPropertyGroupDefinition Constructors SettingsPropertyDefinitionWrapper(Object) Declaration public SettingsPropertyDefinitionWrapper(object object) Parameters Object object Properties CustomFormatter Declaration public Type CustomFormatter { get; } Property Value Type Implements IPropertyDefinitionWithCustomFormatter.CustomFormatter DisplayName The display name of the setting in the settings menu. Declaration public string DisplayName { get; } Property Value String Implements IPropertyDefinitionBase.DisplayName EditableMaxValue Declaration public decimal EditableMaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithEditableMinMax.EditableMaxValue EditableMinValue Declaration public decimal EditableMinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithEditableMinMax.EditableMinValue GroupName The name of the settings group. Includes SubGroup notation if present. Declaration public string GroupName { get; } Property Value String Implements IPropertyGroupDefinition.GroupName GroupOrder Declaration public int GroupOrder { get; } Property Value Int32 Implements IPropertyGroupDefinition.GroupOrder HintText The hint text that is displayed at the bottom of the screen when the user hovers over the setting in the settings menu. Declaration public string HintText { get; } Property Value String Implements IPropertyDefinitionBase.HintText Id Declaration public string Id { get; } Property Value String Implements IPropertyDefinitionWithId.Id IsToggle Declaration public bool IsToggle { get; } Property Value Boolean Implements IPropertyDefinitionGroupToggle.IsToggle MaxValue The maximum value the setting can be set to. Used by the slider control. Declaration public decimal MaxValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MaxValue MinValue The minimum value the setting can be set to. Used by the slider control. Declaration public decimal MinValue { get; } Property Value Decimal Implements IPropertyDefinitionWithMinMax.MinValue Order Require restart of the game if the value is changed. Declaration public int Order { get; } Property Value Int32 Implements IPropertyDefinitionBase.Order PropertyReference Declaration public IRef PropertyReference { get; } Property Value IRef Implements ISettingsPropertyDefinition.PropertyReference RequireRestart Require restart of the game if the value is changed. Declaration public bool RequireRestart { get; } Property Value Boolean Implements IPropertyDefinitionBase.RequireRestart SelectedIndex Declaration public int SelectedIndex { get; } Property Value Int32 Implements IPropertyDefinitionDropdown.SelectedIndex SettingType Declaration public SettingType SettingType { get; } Property Value SettingType Implements ISettingsPropertyDefinition.SettingType ValueFormat The format in which the slider's value will be displayed in. Declaration public string ValueFormat { get; } Property Value String Implements IPropertyDefinitionWithFormat.ValueFormat Methods Clone(Boolean) Declaration public SettingsPropertyDefinition Clone(bool keepRefs = true) Parameters Boolean keepRefs Returns SettingsPropertyDefinition Implements ISettingsPropertyDefinition.Clone(Boolean)"
  },
  "api/MCM.Abstractions.Settings.Models.Wrapper.SettingsPropertyGroupDefinitionWrapper.html": {
    "href": "api/MCM.Abstractions.Settings.Models.Wrapper.SettingsPropertyGroupDefinitionWrapper.html",
    "title": "Class SettingsPropertyGroupDefinitionWrapper | MCM Documentation",
    "keywords": "Class SettingsPropertyGroupDefinitionWrapper Inheritance Object SettingsPropertyGroupDefinition SettingsPropertyGroupDefinitionWrapper Inherited Members SettingsPropertyGroupDefinition.DefaultGroupName SettingsPropertyGroupDefinition.DefaultGroup SettingsPropertyGroupDefinition._groupName SettingsPropertyGroupDefinition._groupNameOverride SettingsPropertyGroupDefinition.subGroups SettingsPropertyGroupDefinition.settingProperties SettingsPropertyGroupDefinition.GroupName SettingsPropertyGroupDefinition.DisplayGroupName SettingsPropertyGroupDefinition.Order SettingsPropertyGroupDefinition.SubGroups SettingsPropertyGroupDefinition.SettingProperties SettingsPropertyGroupDefinition.Add(ISettingsPropertyDefinition) SettingsPropertyGroupDefinition.Add(SettingsPropertyGroupDefinition) SettingsPropertyGroupDefinition.GetGroup(String) SettingsPropertyGroupDefinition.GetGroupFor(String) SettingsPropertyGroupDefinition.ToString() SettingsPropertyGroupDefinition.Clone(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Models.Wrapper Assembly : MCMv4.dll Syntax public sealed class SettingsPropertyGroupDefinitionWrapper : SettingsPropertyGroupDefinition Constructors SettingsPropertyGroupDefinitionWrapper(Object) Declaration public SettingsPropertyGroupDefinitionWrapper(object object) Parameters Object object"
  },
  "api/MCM.Abstractions.Settings.Properties.html": {
    "href": "api/MCM.Abstractions.Settings.Properties.html",
    "title": "Namespace MCM.Abstractions.Settings.Properties | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Properties Classes NoneSettingsPropertyDiscoverer Interfaces IAttributeSettingsPropertyDiscoverer So it can be overriden by an external library ISettingsPropertyDiscoverer"
  },
  "api/MCM.Abstractions.Settings.Properties.IAttributeSettingsPropertyDiscoverer.html": {
    "href": "api/MCM.Abstractions.Settings.Properties.IAttributeSettingsPropertyDiscoverer.html",
    "title": "Interface IAttributeSettingsPropertyDiscoverer | MCM Documentation",
    "keywords": "Interface IAttributeSettingsPropertyDiscoverer So it can be overriden by an external library Inherited Members ISettingsPropertyDiscoverer.DiscoveryTypes ISettingsPropertyDiscoverer.GetProperties(BaseSettings) Namespace : MCM.Abstractions.Settings.Properties Assembly : MCMv4.dll Syntax public interface IAttributeSettingsPropertyDiscoverer : ISettingsPropertyDiscoverer"
  },
  "api/MCM.Abstractions.Settings.Properties.ISettingsPropertyDiscoverer.html": {
    "href": "api/MCM.Abstractions.Settings.Properties.ISettingsPropertyDiscoverer.html",
    "title": "Interface ISettingsPropertyDiscoverer | MCM Documentation",
    "keywords": "Interface ISettingsPropertyDiscoverer Namespace : MCM.Abstractions.Settings.Properties Assembly : MCMv4.dll Syntax public interface ISettingsPropertyDiscoverer Properties DiscoveryTypes Declaration IEnumerable<string> DiscoveryTypes { get; } Property Value IEnumerable < String > Methods GetProperties(BaseSettings) Declaration IEnumerable<ISettingsPropertyDefinition> GetProperties(BaseSettings settings) Parameters BaseSettings settings Returns IEnumerable < ISettingsPropertyDefinition >"
  },
  "api/MCM.Abstractions.Settings.Properties.NoneSettingsPropertyDiscoverer.html": {
    "href": "api/MCM.Abstractions.Settings.Properties.NoneSettingsPropertyDiscoverer.html",
    "title": "Class NoneSettingsPropertyDiscoverer | MCM Documentation",
    "keywords": "Class NoneSettingsPropertyDiscoverer Inheritance Object NoneSettingsPropertyDiscoverer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Properties Assembly : MCMv4.dll Syntax public sealed class NoneSettingsPropertyDiscoverer : ISettingsPropertyDiscoverer Properties DiscoveryTypes Declaration public IEnumerable<string> DiscoveryTypes { get; } Property Value IEnumerable < String > Implements ISettingsPropertyDiscoverer.DiscoveryTypes Methods GetProperties(BaseSettings) Declaration public IEnumerable<ISettingsPropertyDefinition> GetProperties(BaseSettings settings) Parameters BaseSettings settings Returns IEnumerable < ISettingsPropertyDefinition > Implements ISettingsPropertyDiscoverer.GetProperties(BaseSettings)"
  },
  "api/MCM.Abstractions.Settings.Providers.BaseSettingsProvider.html": {
    "href": "api/MCM.Abstractions.Settings.Providers.BaseSettingsProvider.html",
    "title": "Class BaseSettingsProvider | MCM Documentation",
    "keywords": "Class BaseSettingsProvider Inheritance Object BaseSettingsProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Abstractions.Settings.Providers Assembly : MCMv4.dll Syntax public abstract class BaseSettingsProvider Properties CreateModSettingsDefinitions Declaration public abstract IEnumerable<SettingsDefinition> CreateModSettingsDefinitions { get; } Property Value IEnumerable < SettingsDefinition > Instance Declaration public static BaseSettingsProvider Instance { get; } Property Value BaseSettingsProvider Methods GetSettings(String) Declaration public abstract BaseSettings GetSettings(string id) Parameters String id Returns BaseSettings OnGameEnded(Game) Declaration public abstract void OnGameEnded(Game game) Parameters Game game OnGameStarted(Game) Declaration public abstract void OnGameStarted(Game game) Parameters Game game OverrideSettings(BaseSettings) Declaration public abstract void OverrideSettings(BaseSettings settings) Parameters BaseSettings settings ResetSettings(BaseSettings) Declaration public abstract void ResetSettings(BaseSettings settings) Parameters BaseSettings settings SaveSettings(BaseSettings) Declaration public abstract void SaveSettings(BaseSettings settings) Parameters BaseSettings settings"
  },
  "api/MCM.Abstractions.Settings.Providers.html": {
    "href": "api/MCM.Abstractions.Settings.Providers.html",
    "title": "Namespace MCM.Abstractions.Settings.Providers | MCM Documentation",
    "keywords": "Namespace MCM.Abstractions.Settings.Providers Classes BaseSettingsProvider"
  },
  "api/MCM.Abstractions.Settings.SettingType.html": {
    "href": "api/MCM.Abstractions.Settings.SettingType.html",
    "title": "Enum SettingType | MCM Documentation",
    "keywords": "Enum SettingType Namespace : MCM.Abstractions.Settings Assembly : MCMv4.dll Syntax public enum SettingType Bool Dropdown Float Int NONE String"
  },
  "api/MCM.Exceptions.html": {
    "href": "api/MCM.Exceptions.html",
    "title": "Namespace MCM.Exceptions | MCM Documentation",
    "keywords": "Namespace MCM.Exceptions Classes MCMException"
  },
  "api/MCM.Exceptions.MCMException.html": {
    "href": "api/MCM.Exceptions.MCMException.html",
    "title": "Class MCMException | MCM Documentation",
    "keywords": "Class MCMException Inheritance Object Exception MCMException Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : MCM.Exceptions Assembly : MCMv4.dll Syntax [Serializable] public class MCMException : Exception, ISerializable, _Exception Constructors MCMException() Declaration public MCMException() MCMException(SerializationInfo, StreamingContext) Declaration protected MCMException(SerializationInfo info, StreamingContext context) Parameters SerializationInfo info StreamingContext context MCMException(String) Declaration public MCMException(string message) Parameters String message MCMException(String, Exception) Declaration public MCMException(string message, Exception inner) Parameters String message Exception inner"
  },
  "api/MCM.Extensions.BaseSettingsExtensions.html": {
    "href": "api/MCM.Extensions.BaseSettingsExtensions.html",
    "title": "Class BaseSettingsExtensions | MCM Documentation",
    "keywords": "Class BaseSettingsExtensions Inheritance Object BaseSettingsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Extensions Assembly : MCMv4.dll Syntax public static class BaseSettingsExtensions Methods GetAllSettingPropertyDefinitions(BaseSettings) Declaration public static IEnumerable<ISettingsPropertyDefinition> GetAllSettingPropertyDefinitions(this BaseSettings settings) Parameters BaseSettings settings Returns IEnumerable < ISettingsPropertyDefinition > GetAllSettingPropertyGroupDefinitions(BaseSettings) Declaration public static IEnumerable<SettingsPropertyGroupDefinition> GetAllSettingPropertyGroupDefinitions(this BaseSettings settings) Parameters BaseSettings settings Returns IEnumerable < SettingsPropertyGroupDefinition > GetSettingPropertyGroups(BaseSettings) Declaration public static List<SettingsPropertyGroupDefinition> GetSettingPropertyGroups(this BaseSettings settings) Parameters BaseSettings settings Returns List < SettingsPropertyGroupDefinition > GetUnsortedSettingPropertyGroups(BaseSettings) Declaration public static IEnumerable<SettingsPropertyGroupDefinition> GetUnsortedSettingPropertyGroups(this BaseSettings settings) Parameters BaseSettings settings Returns IEnumerable < SettingsPropertyGroupDefinition >"
  },
  "api/MCM.Extensions.html": {
    "href": "api/MCM.Extensions.html",
    "title": "Namespace MCM.Extensions | MCM Documentation",
    "keywords": "Namespace MCM.Extensions Classes BaseSettingsExtensions ServiceCollectionExtensions"
  },
  "api/MCM.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/MCM.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | MCM Documentation",
    "keywords": "Class ServiceCollectionExtensions Inheritance Object ServiceCollectionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Extensions Assembly : MCMv4.dll Syntax public static class ServiceCollectionExtensions Methods AddSettingsBuilderFactory<TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsBuilderFactory<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsBuilderFactory Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsContainer<TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsContainer<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsContainer Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsContainer<TService, TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsContainer<TService, TImplementation>(this IGenericServiceContainer services) where TService : class, ISettingsContainer where TImplementation : class, TService Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TService TImplementation AddSettingsFormat<TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsFormat<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsFormat Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsFormat<TService, TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsFormat<TService, TImplementation>(this IGenericServiceContainer services) where TService : class, ISettingsFormat where TImplementation : class, TService Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TService TImplementation AddSettingsPropertyDiscoverer<TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsPropertyDiscoverer<TImplementation>(this IGenericServiceContainer services) where TImplementation : class, ISettingsPropertyDiscoverer Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsPropertyDiscoverer<TService, TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsPropertyDiscoverer<TService, TImplementation>(this IGenericServiceContainer services) where TService : class, ISettingsPropertyDiscoverer where TImplementation : class, TService Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TService TImplementation AddSettingsProvider<TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsProvider<TImplementation>(this IGenericServiceContainer services) where TImplementation : BaseSettingsProvider Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TImplementation AddSettingsProvider<TService, TImplementation>(IGenericServiceContainer) Declaration public static IGenericServiceContainer AddSettingsProvider<TService, TImplementation>(this IGenericServiceContainer services) where TService : BaseSettingsProvider where TImplementation : class, TService Parameters IGenericServiceContainer services Returns IGenericServiceContainer Type Parameters TService TImplementation"
  },
  "api/MCM.html": {
    "href": "api/MCM.html",
    "title": "Namespace MCM | MCM Documentation",
    "keywords": "Namespace MCM Classes MCMSubModule"
  },
  "api/MCM.Implementation.html": {
    "href": "api/MCM.Implementation.html",
    "title": "Namespace MCM.Implementation | MCM Documentation",
    "keywords": "Namespace MCM.Implementation Classes MCMImplementationSubModule"
  },
  "api/MCM.Implementation.MCMImplementationSubModule.html": {
    "href": "api/MCM.Implementation.MCMImplementationSubModule.html",
    "title": "Class MCMImplementationSubModule | MCM Documentation",
    "keywords": "Class MCMImplementationSubModule Inheritance Object MBSubModuleBase MCMImplementationSubModule Inherited Members MBSubModuleBase.OnSubModuleUnloaded() MBSubModuleBase.OnBeforeInitialModuleScreenSetAsRoot() MBSubModuleBase.OnApplicationTick(Single) MBSubModuleBase.OnGameLoaded(Game, Object) MBSubModuleBase.OnNewGameCreated(Game, Object) MBSubModuleBase.BeginGameStart(Game) MBSubModuleBase.OnCampaignStart(Game, Object) MBSubModuleBase.OnMultiplayerGameStart(Game, Object) MBSubModuleBase.OnGameInitializationFinished(Game) MBSubModuleBase.DoLoading(Game) MBSubModuleBase.OnMissionBehaviourInitialize(Mission) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Implementation Assembly : MCMv4.dll Syntax public sealed class MCMImplementationSubModule : MBSubModuleBase Methods OnGameEnd(Game) Declaration public override void OnGameEnd(Game game) Parameters Game game Overrides MBSubModuleBase.OnGameEnd(Game) OnGameStart(Game, IGameStarter) Declaration protected override void OnGameStart(Game game, IGameStarter gameStarterObject) Parameters Game game IGameStarter gameStarterObject Overrides MBSubModuleBase.OnGameStart(Game, IGameStarter) OnServiceRegistration() Declaration public void OnServiceRegistration() OnSubModuleLoad() Declaration protected override void OnSubModuleLoad() Overrides MBSubModuleBase.OnSubModuleLoad() Extension Methods ServiceCollectionExtensions.GetServiceContainer(MBSubModuleBase)"
  },
  "api/MCM.Implementation.Settings.Containers.Global.html": {
    "href": "api/MCM.Implementation.Settings.Containers.Global.html",
    "title": "Namespace MCM.Implementation.Settings.Containers.Global | MCM Documentation",
    "keywords": "Namespace MCM.Implementation.Settings.Containers.Global Interfaces IMCMFluentGlobalSettingsContainer IMCMGlobalSettingsContainer So it can be overriden by an external library"
  },
  "api/MCM.Implementation.Settings.Containers.Global.IMCMFluentGlobalSettingsContainer.html": {
    "href": "api/MCM.Implementation.Settings.Containers.Global.IMCMFluentGlobalSettingsContainer.html",
    "title": "Interface IMCMFluentGlobalSettingsContainer | MCM Documentation",
    "keywords": "Interface IMCMFluentGlobalSettingsContainer Inherited Members IFluentGlobalSettingsContainer.Register(FluentGlobalSettings) IFluentGlobalSettingsContainer.Unregister(FluentGlobalSettings) ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Implementation.Settings.Containers.Global Assembly : MCMv4.dll Syntax public interface IMCMFluentGlobalSettingsContainer : IFluentGlobalSettingsContainer, IGlobalSettingsContainer, ISettingsContainer"
  },
  "api/MCM.Implementation.Settings.Containers.Global.IMCMGlobalSettingsContainer.html": {
    "href": "api/MCM.Implementation.Settings.Containers.Global.IMCMGlobalSettingsContainer.html",
    "title": "Interface IMCMGlobalSettingsContainer | MCM Documentation",
    "keywords": "Interface IMCMGlobalSettingsContainer So it can be overriden by an external library Inherited Members ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Implementation.Settings.Containers.Global Assembly : MCMv4.dll Syntax public interface IMCMGlobalSettingsContainer : IGlobalSettingsContainer, ISettingsContainer"
  },
  "api/MCM.Implementation.Settings.Containers.PerSave.html": {
    "href": "api/MCM.Implementation.Settings.Containers.PerSave.html",
    "title": "Namespace MCM.Implementation.Settings.Containers.PerSave | MCM Documentation",
    "keywords": "Namespace MCM.Implementation.Settings.Containers.PerSave Interfaces IMCMFluentPerSaveSettingsContainer IMCMPerSaveSettingsContainer So it can be overriden by an external library"
  },
  "api/MCM.Implementation.Settings.Containers.PerSave.IMCMFluentPerSaveSettingsContainer.html": {
    "href": "api/MCM.Implementation.Settings.Containers.PerSave.IMCMFluentPerSaveSettingsContainer.html",
    "title": "Interface IMCMFluentPerSaveSettingsContainer | MCM Documentation",
    "keywords": "Interface IMCMFluentPerSaveSettingsContainer Inherited Members IFluentPerSaveSettingsContainer.Register(FluentPerSaveSettings) IFluentPerSaveSettingsContainer.Unregister(FluentPerSaveSettings) IPerSaveSettingsContainer.OnGameStarted(Game) IPerSaveSettingsContainer.LoadSettings() IPerSaveSettingsContainer.OnGameEnded(Game) ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Implementation.Settings.Containers.PerSave Assembly : MCMv4.dll Syntax public interface IMCMFluentPerSaveSettingsContainer : IFluentPerSaveSettingsContainer, IPerSaveSettingsContainer, ISettingsContainer"
  },
  "api/MCM.Implementation.Settings.Containers.PerSave.IMCMPerSaveSettingsContainer.html": {
    "href": "api/MCM.Implementation.Settings.Containers.PerSave.IMCMPerSaveSettingsContainer.html",
    "title": "Interface IMCMPerSaveSettingsContainer | MCM Documentation",
    "keywords": "Interface IMCMPerSaveSettingsContainer So it can be overriden by an external library Inherited Members IPerSaveSettingsContainer.OnGameStarted(Game) IPerSaveSettingsContainer.LoadSettings() IPerSaveSettingsContainer.OnGameEnded(Game) ISettingsContainer.CreateModSettingsDefinitions ISettingsContainer.GetSettings(String) ISettingsContainer.SaveSettings(BaseSettings) ISettingsContainer.OverrideSettings(BaseSettings) ISettingsContainer.ResetSettings(BaseSettings) Namespace : MCM.Implementation.Settings.Containers.PerSave Assembly : MCMv4.dll Syntax public interface IMCMPerSaveSettingsContainer : IPerSaveSettingsContainer, ISettingsContainer"
  },
  "api/MCM.Implementation.Settings.Formats.Json.html": {
    "href": "api/MCM.Implementation.Settings.Formats.Json.html",
    "title": "Namespace MCM.Implementation.Settings.Formats.Json | MCM Documentation",
    "keywords": "Namespace MCM.Implementation.Settings.Formats.Json Interfaces IJsonSettingsFormat So it can be overriden by an external library"
  },
  "api/MCM.Implementation.Settings.Formats.Json.IJsonSettingsFormat.html": {
    "href": "api/MCM.Implementation.Settings.Formats.Json.IJsonSettingsFormat.html",
    "title": "Interface IJsonSettingsFormat | MCM Documentation",
    "keywords": "Interface IJsonSettingsFormat So it can be overriden by an external library Inherited Members ISettingsFormat.FormatTypes ISettingsFormat.Save(BaseSettings, String, String) ISettingsFormat.Load(BaseSettings, String, String) Namespace : MCM.Implementation.Settings.Formats.Json Assembly : MCMv4.dll Syntax public interface IJsonSettingsFormat : ISettingsFormat Methods LoadFromJson(BaseSettings, String) Declaration BaseSettings LoadFromJson(BaseSettings settings, string content) Parameters BaseSettings settings String content Returns BaseSettings SaveJson(BaseSettings) Declaration string SaveJson(BaseSettings settings) Parameters BaseSettings settings Returns String"
  },
  "api/MCM.Implementation.Settings.Formats.Json2.html": {
    "href": "api/MCM.Implementation.Settings.Formats.Json2.html",
    "title": "Namespace MCM.Implementation.Settings.Formats.Json2 | MCM Documentation",
    "keywords": "Namespace MCM.Implementation.Settings.Formats.Json2 Interfaces IJson2SettingsFormat So it can be overriden by an external library"
  },
  "api/MCM.Implementation.Settings.Formats.Json2.IJson2SettingsFormat.html": {
    "href": "api/MCM.Implementation.Settings.Formats.Json2.IJson2SettingsFormat.html",
    "title": "Interface IJson2SettingsFormat | MCM Documentation",
    "keywords": "Interface IJson2SettingsFormat So it can be overriden by an external library Inherited Members ISettingsFormat.FormatTypes ISettingsFormat.Save(BaseSettings, String, String) ISettingsFormat.Load(BaseSettings, String, String) Namespace : MCM.Implementation.Settings.Formats.Json2 Assembly : MCMv4.dll Syntax public interface IJson2SettingsFormat : ISettingsFormat Methods LoadFromJson(BaseSettings, String) Declaration BaseSettings LoadFromJson(BaseSettings settings, string content) Parameters BaseSettings settings String content Returns BaseSettings SaveJson(BaseSettings) Declaration string SaveJson(BaseSettings settings) Parameters BaseSettings settings Returns String"
  },
  "api/MCM.Implementation.Settings.Formats.Xml.html": {
    "href": "api/MCM.Implementation.Settings.Formats.Xml.html",
    "title": "Namespace MCM.Implementation.Settings.Formats.Xml | MCM Documentation",
    "keywords": "Namespace MCM.Implementation.Settings.Formats.Xml Interfaces IXmlSettingsFormat So it can be overriden by an external library"
  },
  "api/MCM.Implementation.Settings.Formats.Xml.IXmlSettingsFormat.html": {
    "href": "api/MCM.Implementation.Settings.Formats.Xml.IXmlSettingsFormat.html",
    "title": "Interface IXmlSettingsFormat | MCM Documentation",
    "keywords": "Interface IXmlSettingsFormat So it can be overriden by an external library Inherited Members ISettingsFormat.FormatTypes ISettingsFormat.Save(BaseSettings, String, String) ISettingsFormat.Load(BaseSettings, String, String) Namespace : MCM.Implementation.Settings.Formats.Xml Assembly : MCMv4.dll Syntax public interface IXmlSettingsFormat : ISettingsFormat"
  },
  "api/MCM.MCMSubModule.html": {
    "href": "api/MCM.MCMSubModule.html",
    "title": "Class MCMSubModule | MCM Documentation",
    "keywords": "Class MCMSubModule Inheritance Object MBSubModuleBase MCMSubModule Inherited Members MBSubModuleBase.OnGameStart(Game, IGameStarter) MBSubModuleBase.OnApplicationTick(Single) MBSubModuleBase.OnGameLoaded(Game, Object) MBSubModuleBase.OnNewGameCreated(Game, Object) MBSubModuleBase.BeginGameStart(Game) MBSubModuleBase.OnCampaignStart(Game, Object) MBSubModuleBase.OnMultiplayerGameStart(Game, Object) MBSubModuleBase.OnGameInitializationFinished(Game) MBSubModuleBase.DoLoading(Game) MBSubModuleBase.OnGameEnd(Game) MBSubModuleBase.OnMissionBehaviourInitialize(Mission) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM Assembly : MCMv4.dll Syntax public sealed class MCMSubModule : MBSubModuleBase Constructors MCMSubModule() Declaration public MCMSubModule() Properties Instance Declaration public static MCMSubModule Instance { get; } Property Value MCMSubModule Methods OnBeforeInitialModuleScreenSetAsRoot() Declaration protected override void OnBeforeInitialModuleScreenSetAsRoot() Overrides MBSubModuleBase.OnBeforeInitialModuleScreenSetAsRoot() OnServiceRegistration() Declaration public void OnServiceRegistration() OnSubModuleLoad() Declaration protected override void OnSubModuleLoad() Overrides MBSubModuleBase.OnSubModuleLoad() OnSubModuleUnloaded() Declaration protected override void OnSubModuleUnloaded() Overrides MBSubModuleBase.OnSubModuleUnloaded() OverrideServiceContainer(IGenericServiceContainer) Declaration public void OverrideServiceContainer(IGenericServiceContainer serviceContainer) Parameters IGenericServiceContainer serviceContainer Extension Methods ServiceCollectionExtensions.GetServiceContainer(MBSubModuleBase)"
  },
  "api/MCM.Utils.AlphanumComparatorFast.html": {
    "href": "api/MCM.Utils.AlphanumComparatorFast.html",
    "title": "Class AlphanumComparatorFast | MCM Documentation",
    "keywords": "Class AlphanumComparatorFast Alphanumeric sort. This sorting algorithm logically handles numbers in strings. It makes sense to humans. Highway names like 50F and 100F will be sorted wrongly with ASCII sort. It is different from alphabetic, ASCII or numeric sorting. This algorithmic approach is used in file managers. Inheritance Object AlphanumComparatorFast Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Utils Assembly : MCMv4.dll Syntax public class AlphanumComparatorFast : IComparer<string>, IComparer Methods Compare(Object, Object) Declaration public int Compare(object x, object y) Parameters Object x Object y Returns Int32 Implements IComparer.Compare(Object, Object) Compare(String, String) Declaration public int Compare(string s1, string s2) Parameters String s1 String s2 Returns Int32 Implements IComparer<T>.Compare(T, T)"
  },
  "api/MCM.Utils.html": {
    "href": "api/MCM.Utils.html",
    "title": "Namespace MCM.Utils | MCM Documentation",
    "keywords": "Namespace MCM.Utils Classes AlphanumComparatorFast Alphanumeric sort. This sorting algorithm logically handles numbers in strings. It makes sense to humans. Highway names like 50F and 100F will be sorted wrongly with ASCII sort. It is different from alphabetic, ASCII or numeric sorting. This algorithmic approach is used in file managers. SettingsUtils"
  },
  "api/MCM.Utils.SettingsUtils.html": {
    "href": "api/MCM.Utils.SettingsUtils.html",
    "title": "Class SettingsUtils | MCM Documentation",
    "keywords": "Class SettingsUtils Inheritance Object SettingsUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : MCM.Utils Assembly : MCMv4.dll Syntax public static class SettingsUtils Methods CheckIsValid(ISettingsPropertyDefinition, Object) Declaration public static void CheckIsValid(ISettingsPropertyDefinition prop, object settings) Parameters ISettingsPropertyDefinition prop Object settings Equals(BaseSettings, BaseSettings) Declaration public static bool Equals(BaseSettings settings1, BaseSettings settings2) Parameters BaseSettings settings1 BaseSettings settings2 Returns Boolean Equals(ISettingsPropertyDefinition, ISettingsPropertyDefinition) Declaration public static bool Equals(ISettingsPropertyDefinition currentDefinition, ISettingsPropertyDefinition newDefinition) Parameters ISettingsPropertyDefinition currentDefinition ISettingsPropertyDefinition newDefinition Returns Boolean GetAllSettingPropertyDefinitions(SettingsPropertyGroupDefinition) Declaration public static IEnumerable<ISettingsPropertyDefinition> GetAllSettingPropertyDefinitions(SettingsPropertyGroupDefinition settingPropertyGroup1) Parameters SettingsPropertyGroupDefinition settingPropertyGroup1 Returns IEnumerable < ISettingsPropertyDefinition > GetAllSettingPropertyGroupDefinitions(SettingsPropertyGroupDefinition) Declaration public static IEnumerable<SettingsPropertyGroupDefinition> GetAllSettingPropertyGroupDefinitions(SettingsPropertyGroupDefinition settingPropertyGroup1) Parameters SettingsPropertyGroupDefinition settingPropertyGroup1 Returns IEnumerable < SettingsPropertyGroupDefinition > GetGroupFor(Char, ISettingsPropertyDefinition, ICollection<SettingsPropertyGroupDefinition>) Declaration public static SettingsPropertyGroupDefinition GetGroupFor(char subGroupDelimiter, ISettingsPropertyDefinition sp, ICollection<SettingsPropertyGroupDefinition> rootCollection) Parameters Char subGroupDelimiter ISettingsPropertyDefinition sp ICollection < SettingsPropertyGroupDefinition > rootCollection Returns SettingsPropertyGroupDefinition GetGroupForRecursive(Char, String, SettingsPropertyGroupDefinition, ISettingsPropertyDefinition) Declaration public static SettingsPropertyGroupDefinition GetGroupForRecursive(char subGroupDelimiter, string groupName, SettingsPropertyGroupDefinition sgp, ISettingsPropertyDefinition sp) Parameters Char subGroupDelimiter String groupName SettingsPropertyGroupDefinition sgp ISettingsPropertyDefinition sp Returns SettingsPropertyGroupDefinition GetPropertyDefinitionWrappers(Object) Declaration public static IEnumerable<IPropertyDefinitionBase> GetPropertyDefinitionWrappers(object property) Parameters Object property Returns IEnumerable < IPropertyDefinitionBase > GetSelector(Object) Declaration public static object GetSelector(object dropdown) Parameters Object dropdown Returns Object GetSettingsPropertyGroups(Char, IEnumerable<ISettingsPropertyDefinition>) Declaration public static List<SettingsPropertyGroupDefinition> GetSettingsPropertyGroups(char subGroupDelimiter, IEnumerable<ISettingsPropertyDefinition> settingsPropertyDefinitions) Parameters Char subGroupDelimiter IEnumerable < ISettingsPropertyDefinition > settingsPropertyDefinitions Returns List < SettingsPropertyGroupDefinition > GetTopGroupName(Char, String, out String) Declaration public static string GetTopGroupName(char subGroupDelimiter, string groupName, out string truncatedGroupName) Parameters Char subGroupDelimiter String groupName String truncatedGroupName Returns String IsForCheckboxDropdown(Object) Declaration public static bool IsForCheckboxDropdown(object obj) Parameters Object obj Returns Boolean IsForCheckboxDropdown(Type) Declaration public static bool IsForCheckboxDropdown(Type type) Parameters Type type Returns Boolean IsForGenericDropdown(Type) Declaration public static bool IsForGenericDropdown(Type type) Parameters Type type Returns Boolean IsForTextDropdown(Object) Declaration public static bool IsForTextDropdown(object obj) Parameters Object obj Returns Boolean IsForTextDropdown(Type) Declaration public static bool IsForTextDropdown(Type type) Parameters Type type Returns Boolean OverrideSettings(BaseSettings, BaseSettings) Declaration public static void OverrideSettings(BaseSettings settings, BaseSettings overrideSettings) Parameters BaseSettings settings BaseSettings overrideSettings OverrideValues(BaseSettings, BaseSettings) Declaration public static void OverrideValues(BaseSettings current, BaseSettings new) Parameters BaseSettings current BaseSettings new OverrideValues(ISettingsPropertyDefinition, ISettingsPropertyDefinition) Declaration public static void OverrideValues(ISettingsPropertyDefinition current, ISettingsPropertyDefinition new) Parameters ISettingsPropertyDefinition current ISettingsPropertyDefinition new OverrideValues(SettingsPropertyGroupDefinition, SettingsPropertyGroupDefinition) Declaration public static void OverrideValues(SettingsPropertyGroupDefinition current, SettingsPropertyGroupDefinition new) Parameters SettingsPropertyGroupDefinition current SettingsPropertyGroupDefinition new ResetSettings(BaseSettings) Declaration public static void ResetSettings(BaseSettings settings) Parameters BaseSettings settings"
  },
  "articles/contributors.html": {
    "href": "articles/contributors.html",
    "title": "| MCM Documentation",
    "keywords": "Make sure that GameFolder property in build/common.props corresponds to the location of where the root Bannerlord folder is. Make sure that you can access BUTR NuGet feed. Make sure that every test is passing before sharing your constribution!"
  },
  "articles/GitHub Actions/environment-variables-used.html": {
    "href": "articles/GitHub Actions/environment-variables-used.html",
    "title": "| MCM Documentation",
    "keywords": "NEXUSMODS_COOKIES_JSON : a JSON array of the cookies that are used by Bannerlord.NexusmodsUploader . In this format . NUGET_API_KEY : the API key for uploading packages to NuGet. REPO_ACCESS_TOKEN : GitHub token with public_repo access for downloading release assets. SCREENSHOTS_PASSWORD : string that is used for 7z to password protect the screenshots by Bannerlord.NexusmodsUploader . STEAM_LOGIN : Steam account login for DepotDownloader . STEAM_PASSWORD : Steam account password for DepotDownloader ."
  },
  "articles/GitHub Actions/index.html": {
    "href": "articles/GitHub Actions/index.html",
    "title": "| MCM Documentation",
    "keywords": ""
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "| MCM Documentation",
    "keywords": ""
  },
  "articles/MCMv2/attributes.html": {
    "href": "articles/MCMv2/attributes.html",
    "title": "Warning! | MCM Documentation",
    "keywords": "Warning! Dropdown is not supported in v1.1.15 and will be introduced in the v2 release! Each setting you want to add to the menu has to be marked with an attribute. You can additionally group settings by adding the SettingPropertyGroup attribute. '/' is used as the default separator. Right now, the mod provides these types in the setting menu: Bool Int Float String Dropdown v1 With v1 of the API, SettingProperty has multiple constructors, each designed for the specific value it represents. Bool [SettingProperty(displayName: \"Setting Name\", requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int [SettingProperty(displayName: \"Setting Name\", minValue: 0, maxValue: 10, editableMinValue: 0, editableMaxValue: 100, requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 5; Float [SettingProperty(displayName: \"Setting Name\", minValue: 0f, maxValue: 0.5f, editableMinValue: 0f, editableMaxValue: 1f, requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.2f; String [SettingProperty(displayName: \"Setting Name\", requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; v2 With v2 of the API, there's multiple types of setting properties to make using them less confusing, and the settings can also be ordered by indexing them. It's also possible to format the display of the numerical values for the int and float sliders. Bool [SettingPropertyBool(displayName: \"Setting Name\", order: 0, requireRestart: false, hintText: \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int // Value is displayed as \"X Denars\" [SettingPropertyInteger(displayName: \"Setting Name\", minValue: 0, maxValue: 100, order: 1, requireRestart: false, hintText: \"Setting explanation.\", valueFormat: \"0 Denars\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 25; Float // Value is displayed as a percentage [SettingPropertyFloatingInteger(displayName: \"Setting Name\", minValue: 0f, maxValue: 1f, order: 2, requireRestart: false, hintText: \"Setting explanation.\", valueFormat: \"#0%\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = 0.75; String // Value is displayed as a percentage [SettingPropertyText(displayName: \"Setting Name\", order: 3, requireRestart: false, hintText: \"Setting Explanation\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Dropdown [SettingPropertyDropdown(\"Setting Name\", 0)] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<string> SettingVariableName { get; set; } = new DefaultDropdown<string>(new string[] { \"Test1\", \"Test2\", \"Test3\" }, 0); It can also use custom classes. Don't forget to override .ToString()! [SettingPropertyDropdown(\"Setting Name\", 0)] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<CustomObject> SettingVariableName { get; set; } = new DefaultDropdown<CustomObject>(new CustomObject[] { new CustomObject(\"Test1\"), new CustomObject(\"Test2\"), new CustomObject(\"Test3\") }, 0); public class CustomObject { private readonly string _value; public CustomObject(string value) => _value = value; public override string ToString() => _value; }"
  },
  "articles/MCMv2/comparing-to-modlib.html": {
    "href": "articles/MCMv2/comparing-to-modlib.html",
    "title": "Modularity | MCM Documentation",
    "keywords": "Modularity One of the main features of Bannerlord.MBOptionScreen is modularity or 'versioning'. Every component was abstracted, so that they could be easily replaced if the game updates. What does it mean for modders? It doesn't matter that you haven't updated Bannerlord.MBOptionScreen to the latest version. As long as any loaded Module in the game uses a newer version of it, the implementations inside it will be used globally. Each new implementation of a component will be written with backwards compatibility, so if some really old mod was installed together with a fresh one, Bannerlord.MBOptionScreen will not break and will provide options for both mods. What does it mean for users? If some mod was broken because of an old version of Bannerlord.MBOptionScreen , installing a newer version of it as a standalone module will fix it without the need of replacing anything in the original mod. Idempotency Bannerlord.MBOptionScreen ensures that it will be initialized only once, no matter how much modules reference it or includes it within them. And only the latest implementations that are compatible with the game version will be used. Easy to use Bannerlord.MBOptionScreen does not require anything from the modder except of the implementation of a SettingsBase class. It will discover every implementation of a SettingsBase itself, via reflection and initiate it. You also don't need to include any additional .xml files like brushes and prefabs. They are embed into the assembly and will inject themselves into the game during the initialization phase. In-game option The mod add an entry to the in-game escape menu to access the Mod Options menu inside the campaign! Backwards-compatibility Bannerlord.MBOptionScreen supports settings from ModLib . By default, the original ModLib menu option is replaced with Bannerlord.MBOptionScreen . This can be disabled in options. It also provides a stub ModLib.dll file to make Bannerlord.MBOptionScreen work even if ModLib is not present. Localization Supports TW's way of localizing text."
  },
  "articles/MCMv2/Installation/editing-submodule.xml.html": {
    "href": "articles/MCMv2/Installation/editing-submodule.xml.html",
    "title": "| MCM Documentation",
    "keywords": "For the options to work, you should include the additional SubModule that Bannerlord.MBOptionScreen provides <SubModule> <Name value=\"MBOptionScreen\" /> <DLLName value=\"MBOptionScreen.v2.0.10.dll\" /> <SubModuleClassType value=\"MBOptionScreen.MBOptionScreenSubModuleV2010\" /> <Tags> <Tag key=\"DedicatedServerType\" value=\"none\" /> <Tag key=\"IsNoRenderModeElement\" value=\"false\" /> </Tags> </SubModule> You need to reference a specific assembly version. For example, if you are integrating v2.0.4, be sure that the .dll name is MBOptionScreen.v2.0.4.dll . The reason for this is that the game might have multiple mods with integrated MBOptionScreen. If the library name is the same one (MBOptionScreen.dll), only one version would be used. It could be a lower version, which will break mods depending on a higher version. By specifying the library version, every MBOptionScreen library will be loaded. While this will take a little more more resources, we can guarantee that MBOptionScreen will always find the latest interface implementations that are compatible with the game version. In conclusion, let's say you are making a mod Aragas.MercenaryContract. And you would like to use MBOptionScreen as a dependency. Instead of your old ways with ModLib(when you add a DependedModule). You should add another tag of SubModule inside the SubModules tag. So basically your SubModules tag is supposed to hold two SubModule tag inside of itself. And they should look like this: <SubModules> <SubModule> <Name value=\"Aragas.MercenaryContract\" /> <DLLName value=\"Aragas.MercenaryContract.dll\" /> <SubModuleClassType value=\"Aragas.MountAndBlade.MercenaryContractSubModule\" /> <Tags> <Tag key=\"DedicatedServerType\" value=\"none\" /> <Tag key=\"IsNoRenderModeElement\" value=\"false\" /> </Tags> </SubModule> <SubModule> <Name value=\"MBOptionScreen\" /> <DLLName value=\"MBOptionScreen.v2.0.4.dll\" /> <SubModuleClassType value=\"MBOptionScreen.MBOptionScreenSubModule\" /> <Tags> <Tag key=\"DedicatedServerType\" value=\"none\" /> <Tag key=\"IsNoRenderModeElement\" value=\"false\" /> </Tags> </SubModule> </SubModules> Remember after you compile your mod, there is supposed to be an MBOptionScreen.v%VERSION%.dll inside the Win64_Shipping_Client folder of your module. In this way, the Bannerlord launcher should load your module with MBOptionScreen without any problems."
  },
  "articles/MCMv2/Installation/installation.html": {
    "href": "articles/MCMv2/Installation/installation.html",
    "title": "| MCM Documentation",
    "keywords": "You need to install the NuGet package Bannerlord.MBOptionScreen . Add the submodule in your SubModule definition Add an implementation of SettingsBase . Please note that you should not use Settings.Instance in OnSubModuleLoad() as the setting might still not be loaded depending on mod loading order. No additional steps are required. The Module will find all existing SettingsBase implementation and show them in the settings menu. Old and current implementations based on ModLib are supported, but the settings will reset due to different handling of configuration files. You don't need to add the .xml files. They are embedded into the module itself and will be injected into the game automatically."
  },
  "articles/MCMv2/Installation/settings-definition-example.html": {
    "href": "articles/MCMv2/Installation/settings-definition-example.html",
    "title": "| MCM Documentation",
    "keywords": "Example settings. Check this page for specific information on the attributes. public class CustomSettings : AttributeSettings<CustomSettings> { // I recommend to use format \"INTERNALMODNAME_v1\", e.g. \"Aragas.MercenaryContract_v1\" // You SHOULD change the version if you change the setting class in a non backwards-compatible way public override string Id { get; set; } = \"Aragas.MercenaryContract_v1\"; // Your mod name in human readable format, e.g. \"Limited Mercenary Contract\" public override string ModName => \"Your Mod Name\"; // The name of the folder within which the settings will be saved, e.g. \"Aragas.MercenaryContract\" public override string ModuleFolderName => \"Name_of_Folder_Used_for_Saving_Settings\"; // Actual configuration definition with the v1 API // v2 API is highly recommended and v1 API is annotated obsolete in latest version (This line add by SaulHE) [SettingProperty(\"Enabled\", \"\")] [SettingPropertyGroup(\"General\")] public bool Enabled { get; set; } = true; [SettingProperty(\"Apply Relationship Rules to NPC\", \"\")] [SettingPropertyGroup(\"General\")] public bool ApplyRelationshipRulesToNPC { get; set; } = false; [SettingProperty(\"Independent Multiplier\", 1, 4, \"Relationship multiplier when Hero is independent.\")] [SettingPropertyGroup(\"Multipliers\")] public int IndependentMultiplier { get; set; } = 1; [SettingProperty(\"Mercenary Multiplier\", 1, 4, \"Relationship multiplier when Hero is a mercenary.\")] [SettingPropertyGroup(\"Multipliers\")] public int MercenaryMultiplier { get; set; } = 1; [SettingProperty(\"Vassal Multiplier\", 1, 4, \"Relationship multiplier when Hero is a vassal.\")] [SettingPropertyGroup(\"Multipliers\")] public int VassalMultiplier { get; set; } = 2; // Configuration definition with the v2 API [SettingPropertyBool(displayName: \"Test Bool\", order: -1, requireRestart: false, hintText: \"This is a v2 bool value definition\")] [SettingPropertyGroup(\"v2 Test\")] public bool TestBool { get; set; } = true; [SettingPropertyFloatingInteger(displayName: \"Test Float\", minValue: 0f, maxValue: 1f, requireRestart: false, hintText: \"A v2 float definition formatted to a percentage display\", valueFormat: \"#0%\")] [SettingPropertyGroup(\"v2 Test\")] public float TestFloat { get; set; } = 0.5f; [SettingPropertyInteger(displayName: \"Test Int\", minValue: 0, maxValue: 50, requireRestart: false, hintText: \"A v2 float definition with 'Denars' appended to the value\", valueFormat: \"0 Denars\")] [SettingPropertyGroup(\"v2 Test\")] public int TestInt { get; set; } = 20; [SettingPropertyText(displayName: \"Test Text\", order: -1, requireRestart: false, hintText: \"A v2 textbox definition\")] [SettingPropertyGroup(\"v2 Test\")] public string TestText { get; set; } = \"Test\"; } To get the loaded setting in your mod, use the static property CustomSettings.Instance . To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Different than ModLib, You don't have to do anything except for implementing your own custom setting class. MBOptionScreen will automatically scan any derived classes of AttributeSetting class."
  },
  "articles/MCMv2/migrating-to-v2.html": {
    "href": "articles/MCMv2/migrating-to-v2.html",
    "title": "| MCM Documentation",
    "keywords": "SettingProperty moved from MBOptionScreen.Attributes to MBOptionScreen.Attributes.v1 SubModule.xml needs to be updated - change DLLName attribute from MBOptionScreen.dll to MBOptionScreen.v2.0.2.dll or the version you currently use. Basically, after each update of MBOptionScreen , don't forget to change the numbers. It's advised to switch to v2 API of property definition, more info here"
  },
  "articles/MCMv2/project-example.html": {
    "href": "articles/MCMv2/project-example.html",
    "title": "| MCM Documentation",
    "keywords": "You can check an example of usage of Bannerlord.MBOptionScreen in my other mod, Aragas.MercenaryContract ."
  },
  "articles/MCMv3/mcmv3.html": {
    "href": "articles/MCMv3/mcmv3.html",
    "title": "Overview | MCM Documentation",
    "keywords": "Overview MCMv3 consists of three core libraries: MCMv3 - abstraction layer. Includes v1/v2 Attribute API and a Fluent Builder API that allows to define settings at runtime. MCMv3.Implementation - common implementations. MCMv3.UI - GauntletUI implementations. MCMv3 also provides compatibility layers for other mods: MCMv3.Implementation.MBO - MBOv1/MCMv2. MCMv3.Implementation.ModLib - ModLib, pre 1.3 and post 1.3. Both compatibility layers replace the original libraries to ensure maximum compatibility with MCMv3. Supported API MCMv3 support 5 API sets: MCMv3 - main API. MBOv1 - MBOptionScreen v1.1.15 (Requires MCM.Implementation.MBO ) MBOv2 / MCMv2 - v2.0.4-v2.0.11 (Requires MCM.Implementation.MBO ) ModLibV1 - v1.0.0-v1.0.2 (Requires MCM.Implementation.ModLib ) ModLibV13 - v1.3.0-v1.4.0 (Requires MCM.Implementation.ModLib ) Using with your mods You have two options as to how to use MCMv3: Integrate MCMv3 into your mod by using NuGet packet Bannerlord.MCM.Integrated Directly depend on the Nexus standalone mod and use NuGet packet Bannerlord.MCM Warning Integration is no longer supported and should be replaced with MCMv4 or newer. By integrating MCMv3 you won't need to depend on the Nexus standalone package. It will be loaded with your mod and should pick up the settings from your mod and any other mod that uses MCMv3. ModLib and MBO/MCM compatibility will not be provided. The v3 version still has sometimes issues with the integration system due to game limitations regarding being unable to load multiple versions of the same assembly (DLL). While those issues are not fixed I would suggest to depend on MCM package/Nexus mod if possible. I at least can guarantee that if the standalone MCM mod is installed, any bugs related to MCM are fixed without your need to update the integrated package. The next big release, v4, will not offer an integrated version in favor of the determinism and stability of relying upon a standalone mod. You also need to include this to your SubModules.xml! <SubModule> <Name value=\"MCMv3 Integrated Loader\"/> <DLLName value=\"MCMv3.dll\"/> <SubModuleClassType value=\"MCM.IntegratedLoaderSubModule\"/> <Tags/> </SubModule> By depending on the standalone module the experience is basically the same as to ModLib. You only use the MCMv3 abstraction layer and the Nexus standalone mod will ensure that your settings are displayed. Types of settings As of now, Mod Option mods provided Global options that are shared across different games/saves. MCMv3 introduces a second type of settings - PerCharacter , it will be unique for each character and will be shared across saves with the same character. Included Settings Formats and implementing your own MCMv3.Implementation provides json and xml file formats. You can define your own file formats and take full control of how the settings are saved/loaded by implementing an interface that... implements ISettingsFormat and @\"MCM.Abstractions.IDependency?text=IDependency\". public interface IYamlSettingsFormat : ISettingsFormat, IDependency { } [Version(\"e1.0.0\", 1)] internal class YamlSettingsFormat : IYamlSettingsFormat { } Presets The setting support custom presets! Attribute API The Attribute API based settings will provide a 'Default' preset that can be used to revert the options to their default values. To override the 'Default' preset or add your custom presets, override GetAvailablePresets() , here's an example. public override IDictionary<string, Func<BaseSettings>> GetAvailablePresets() { var basePresets = base.GetAvailablePresets(); // include the 'Default' preset that MCM provides basePresets.Add(\"Reverse\", () => new CustomSettings() { Property1 = false, Property2 = true }); basePresets.Add(\"False\", () => new CustomSettings() { Property1 = false, Property2 = false }); basePresets.Add(\"True\", () => new CustomSettings() { Property1 = true, Property2 = true }); return basePresets; } Fluent API The Fluent Builder does not support Presets in v3, but it's a planned feature for v4! Localization Attribute API Both property Name and HintText support game's localization system, this means that you can use such code [SettingPropertyBool(\"{=DvfsSDF}Property Sample\", HintText = \"{=DnfhFD}Sample Hint Text.\")] [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\")] You also can use the localization system for nested groups! [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\\{=GDgsdfj}Nested Group Sample\")] INotifyPropertyChanged The settings implement the INotifyPropertyChanged interface. MCM subscribes to it and will refresh the UI if any value has changed. MCM will also trigger PropertyChanged event when the setting are saved by providing BaseSettings.SaveTriggered constant with value SAVE_TRIGGERED . IRef IRef is an interface that acts as a link to the actual values that classes like Fluent Builder uses. MCMv3 has two implementations: PropertyRef - links to an actual property ( PropertyRef(PropertyInfo propInfo, object instance) ). ProxyRef<T> - links to get/set actions ( ProxyRef(Func<T> getter, Action<T>? setter) ) that will set/return whatever you want. Defining Settings Check this page for using the Attribute definition Check this page for using the Fluent Builder Example of Settings definition Attribute API internal sealed class MCMUISettings : AttributeGlobalSettings<MCMUISettings> // AttributePerCharacterSettings<MCMUISettings> { private bool _useStandardOptionScreen = false; public override string Id => \"MCMUI_v3\"; public override string DisplayName => $\"MCM UI Impl. {typeof(MCMUISettings).Assembly.GetName().Version.ToString(3)}\"; public override string FolderName => \"MCM\"; public override string Format => \"json\"; [SettingPropertyBool(\"Use Standard Option Screen\", Order = 1, RequireRestart = false, HintText = \"Use standard Options screen instead of using an external.\")] [SettingPropertyGroup(\"General\")] public bool UseStandardOptionScreen { get => _useStandardOptionScreen; set { if (_useStandardOptionScreen != value) { _useStandardOptionScreen = value; OnPropertyChanged(); } } } } Fluent API bool _boolValue = false; int _intValue = 1; float _floatValue = 0f; string _stringValue = string.Empty; var builder = new DefaultSettingsBuilder(\"test_v1\", \"Test Fluent Settings\") .SetFormat(\"xml\") .SetFolderName(string.Empty) .SetSubFolder(string.Empty) .CreateGroup(\"Testing 1\", groupBuilder => groupBuilder .AddBool(\"Check Box\", new ProxyRef<bool>(() => _boolValue, o => _boolValue = o), boolBuilder => boolBuilder .SetHintText(\"Test\"))) .CreateGroup(\"Testing 2\", groupBuilder => groupBuilder .AddInteger(\"Integer\", 0, 10, new ProxyRef<int>(() => _intValue, o => _intValue = o), integerBuilder => integerBuilder .SetHintText(\"Testing\")) .AddFloatingInteger(\"Floating Integer\", 0, 10, new ProxyRef<float>(() => _floatValue, o => _floatValue = o), floatingBuilder => floatingBuilder .SetRequireRestart(true) .SetHintText(\"Test\"))) .CreateGroup(\"Testing 3\", groupBuilder => groupBuilder .AddText(\"Test\", new ProxyRef<string>(() => _stringValue, o => _stringValue = o), null)); var globalSettings = builder.BuildAsGlobal(); globalSettings.Register(); globalSettings.Unregister(); var perCharacterSettings = builder.BuildAsPerCharacter(); perCharacterSettings.Register(); perCharacterSettings.Unregister(); Translating MCM Just create a module and include in the module folder root folders ModuleData/Languages and include the translations of the following files: std_MCM.xml std_MCM_Implementation.xml std_MCM_MBO.xml std_MCM_ModLib.xml std_MCM_UI.xml The game will load them automatically! Migrating to v3 ModLib v1 (1.0.0-1.0.2) [ XmlElement ] attribute is not required Namespace of SettingPropertyAttribute changed to MCM.Abstractions.Attributes.v1 SettingPropertyAttribute.EditableMinValue and SettingPropertyAttribute.EditableMaxValue were removed SettingPropertyAttribute.HintText is an attribute optional parameter MCM's SettingPropertyAttribute introduces new properties Order and RequireRestart Namespace of SettingPropertyGroupAttribute changed to MCM.Abstractions.Attributes SettingPropertyGroupAttribute.IsMainToggle is an attribute optional parameter ModLib.SettingsBase needs to be changed to AttributeGlobalSettings<T> ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName , no longer required ModLib v13 (1.3 and beyond) [ XmlElement ] attribute is not required Namespace of SettingPropertyAttribute changed to MCM.Abstractions.Attributes.v1 SettingPropertyAttribute.EditableMinValue and SettingPropertyAttribute.EditableMaxValue were removed SettingPropertyAttribute.HintText is an attribute optional parameter MCM's SettingPropertyAttribute introduces new properties Order and RequireRestart Namespace of SettingPropertyGroupAttribute changed to MCM.Abstractions.Attributes SettingPropertyGroupAttribute.IsMainToggle is an attribute optional parameter ModLib.Definitions.SettingsBase needs to be changed to AttributeGlobalSettings<T> ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName , no longer required MBOv1 (MBO 1.0.15 or lower) Attributes changed its namespace from MBOptionScreen.Attributes to MCM.Abstractions.Attributes MBOptionScreen.Settings.AttributeSettings<T> needs to be changed to AttributeGlobalSettings<T> ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName , no longer required MCMv2 (MCM v2.0.10 or lower) Attributes changed its namespace from MBOptionScreen.Attributes to MCM.Abstractions.Attributes MBOptionScreen.Settings.AttributeSettings<T> needs to be changed to AttributeGlobalSettings<T> ModName was renamed to DisplayName ModuleFolderName was renamed to FolderName , no longer required"
  },
  "articles/MCMv3/mcmv3-attributes.html": {
    "href": "articles/MCMv3/mcmv3-attributes.html",
    "title": "v1 | MCM Documentation",
    "keywords": "Each setting you want to add to the menu has to be marked with an attribute. You can additionally group settings by adding the SettingPropertyGroup attribute. '/' is used as the default separator. Right now, the mod provides these types in the setting menu: Bool Int Slider / Textbox Float Slider / Textbox Textbox Dropdown v1 With v1 of the API, SettingProperty has multiple constructors, each designed for the specific value it represents. Bool [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int [SettingProperty(\"Setting Name\", minValue: 0, maxValue: 10, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 5; Float [SettingProperty(\"Setting Name\", minValue: 0f, maxValue: 0.5f, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.2f; String [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; v2 With v2 of the API, there's multiple types of setting properties to make using them less confusing, and the settings can also be ordered by indexing them. It's also possible to format the display of the numerical values for the int and float sliders. Bool ( SettingPropertyBool ) [SettingPropertyBool(\"Setting Name\", Order = 0, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int ( SettingPropertyInteger ) // Value is displayed as \"X Denars\" [SettingPropertyInteger(\"Setting Name\", 0, 100, \"0 Denars\", Order = 1, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 25; Float ( SettingPropertyFloatingInteger ) // Value is displayed as a percentage [SettingPropertyFloatingInteger(\"Setting Name\", 0f, 1f, \"#0%\", Order = 2, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = 0.75; String ( SettingPropertyText ) // Value is displayed as a percentage [SettingPropertyText(\"Setting Name\", Order = 3, RequireRestart = false, HintText = \"Setting Explanation\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Dropdown ( SettingPropertyDropdown ) [SettingPropertyDropdown(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<string> SettingVariableName { get; set; } = new DefaultDropdown<string>(new string[] { \"Test1\", \"Test2\", \"Test3\" }, 0); It can also use custom classes. Don't forget to override .ToString()! [SettingPropertyDropdown(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DefaultDropdown<CustomObject> SettingVariableName { get; set; } = new DefaultDropdown<CustomObject>(new CustomObject[] { new CustomObject(\"Test1\"), new CustomObject(\"Test2\"), new CustomObject(\"Test3\") }, 0); public class CustomObject { private readonly string _value; public CustomObject(string value) => _value = value; public override string ToString() => _value; }"
  },
  "articles/MCMv3/mcmv3-fluent-builder.html": {
    "href": "articles/MCMv3/mcmv3-fluent-builder.html",
    "title": "| MCM Documentation",
    "keywords": "Fluent Builder gives the ability to create Settings at runtime. This can be useful for mod specific sections that should not be displayed if the mod is not loaded. MCM provides the builder interface ISettingsBuilder and a default implementation @\"MCM.Abstractions.FluentBuilder.Implementation.DefaultSettingsBuilder?text=DefaultSettingsBuilder\". Any property is set by a Set%PropertyName% method. CreateGroup creates a property group where you can define your properties. The default Group name is 'Misc'. Use teh action delegate to configure the property group. AddBool creates a Bool property. AddInteger creates an Integer Slider property. AddFloatingInteger creates an Float Slider property. AddText creates an Textbox property. AddDropdown creates a Dropdown property. AddCustom can add a custom property. The custom property should implement one of the interfaces defined in MCM.Abstractions.Settings.Definitions namespace. Currently there is no way of defining a custom UI Control. One of the possible fixes would be to use UIExtender library. BuildAsGlobal returns a Global setting instance. Use Register and Unregister for MCM to use it. BuildAsPerCharacter returns a PerCharacter setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in."
  },
  "articles/MCMv3/mcmv3-soft-dependency.html": {
    "href": "articles/MCMv3/mcmv3-soft-dependency.html",
    "title": "| MCM Documentation",
    "keywords": "MCMv3 has a bug that requires a small workaround for it to be used as a soft dependency. Mod Developers are required to include the MCMv3.dll library inside their /bin folder. Example of usage: The recommended approach is to define a provider interface and depending on certain conditions, switch bewteen them either at the constructor stage or dynamically. Here is the final settings class that switches between the providers at the constructor stage: public class CustomSettings { private ICustomSettingsProvider _provider; public bool OverrideSomething { get => _provider.OverrideSomething; set => _provider.OverrideSomething = value; } public Settings() { var useMCM = true; try { // CustomSettings.Instance will throw an exception instead of returning null. // This is fixed in MCMv4 var instance = CustomSettings.Instance; } catch(Exception) { useMCM = false; } if (false) { _provider = CustomSettings.Instance; else { _provider = new HardcodedCustomSettings(); } } } Here is the provider interface definition and two implementations - one that uses MCM and a custom one that has some hardcoded values. public interface ICustomSettingsProvider { bool OverrideSomething { get; set; } } public class HardcodedCustomSettings : ICustomSettingsProvider { public bool OverrideSomething { get; set; } = true; } public class CustomSettings : AttributeGlobalSettings<CustomSettings>, ICustomSettingsProvider { private bool _overrideSomething = true; public override string Id { get; } = \"CustomSettings_v1\"; public override string DisplayName => TextObjectHelper.Create(\"{=CustomSettings_Name}Custom {VERSION}\", new Dictionary<string, TextObject> { { \"VERSION\", TextObjectHelper.Create(typeof(CustomSettings).Assembly.GetName().Version.ToString(3)) } }).ToString(); public override string FolderName { get; } = \"Custom\"; public override string FormatType { get; } = \"json2\"; [SettingPropertyBool(\"{=CustomSettings_Override}Override Ssomething\", RequireRestart = true, HintText = \"{=CustomSettings_OverrideDesc}If set, does something.\")] [SettingPropertyGroup(\"{=CustomSettings_General}General\")] public bool OverrideSomething { get => _overrideSomething; set { if (_overrideSomething != value) { _overrideSomething = value; OnPropertyChanged(); } } } }"
  },
  "articles/MCMv4/mcmv4.html": {
    "href": "articles/MCMv4/mcmv4.html",
    "title": "Overview | MCM Documentation",
    "keywords": "Overview MCMv4 consists of two libraries: MCMv4 - Core. Includes v1/v2 Attribute API and a Fluent Builder API that allows to define settings at runtime. Includes a basic implementation of all abstract interfaces. MCMv4.UI - GauntletUI implementations. MCMv4 also provides compatibility layers for other API's (Modules): MCM.Adapter.MBO - MBOv1/MCMv2. MCM.Adapter.MCMv3 - MCMv3. MCM.Adapter.ModLib - ModLib, pre 1.3 and post 1.3. The compatibility layers replace the original libraries to ensure maximum compatibility with MCM. Supported API MCMv4 support 6 API sets: MCMv4 - main API. MBOv1 - MBOptionScreen v1.1.15 (Requires MCM.Adapter.MBO ) MBOv2 / MCMv2 - v2.0.10 (Requires MCM.Adapter.MBO ) MCMv3 - v3.1.9 (Requires MCM.Adapter.MCMv3 ) ModLibV1 - v1.0.0-v1.0.2 (Requires MCM.Adapter.ModLib ) ModLibV13 - v1.3.0-v1.4.0 (Requires MCM.Adapter.ModLib ) Using with your mods You have two options as to how to use MCMv4: Include MCMv4 into your mod /bin folder by using NuGet packet Bannerlord.MCM . Also, add a SubModule entry in SubModules.xml . Directly depend on the NexusMods Standalone mod and use NuGet packet Bannerlord.MCM . Don't include anything in your /bin folder from MCM. By including MCMv4 you will be able to save/load settings programmatically, without having the UI Options screen when the Standalone module is not installed. ... <SubModules> <SubModule> <Name value=\"MCMv4\" /> <DLLName value=\"MCMv4.dll\" /> <SubModuleClassType value=\"MCM.MCMSubModule\" /> <Tags /> </SubModule> <SubModule> <Name value=\"MCMv4 Basic Implementation\" /> <DLLName value=\"MCMv4.dll\" /> <SubModuleClassType value=\"MCM.Implementation.MCMImplementationSubModule\" /> <Tags /> </SubModule> </SubModules> ... By depending on the standalone module the experience is basically the same as with ModLib. The Nexus standalone module will ensure that your settings are displayed correctly. You also need to add Bannerlord.MBOptionScreen as a dependency to your SubModules.xml! ... <DependedModules> <DependedModule Id=\"Bannerlord.MBOptionScreen\"/> </DependedModules> ... Types of settings As of now, Mod Option libraries provided Global options that are shared across different games/saves. MCMv4 introduces a second type of settings - PerSave . They are stored in the save file itself. When MCM is removed, the save file will still be playable. Basically, they do not brick the saves. Be aware that saving even once without MCM will wipe all settings from the save file permanently. Included Settings Formats and implementing your own Warning In MCMv4, the default settings provider is none , this means that your settings won't be saved to disk unless you override Settings.FormatType ! MCMv4 provides json ( json and json2 internally) and xml file formats. You can define your own file formats and take full control of how the settings are saved/loaded by implementing the interface ISettingsFormat . internal class YamlSettingsFormat : ISettingsFormat { ... public IEnumerable<string> FormatTypes { get; } = new [] { \"your_prefix_yaml\", \"your_prefix_yml\" }; ... } You also need to register the new interface: // In your MBSubModuleBase override protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); if (this.GetServiceContainer() is not null services) { services.AddSettingsFormat<YamlSettingsFormat>(); } } Usage: public abstract class YamlSettings : GlobalSettings<YamlSettings> { public override string FormatType { get; } = \"your_prefix_yaml\"; } Presets The setting support custom presets! Attribute API The Attribute API based settings will provide a 'Default' preset that can be used to revert the options to their default values. To override the 'Default' preset or add your custom presets, override GetAvailablePresets() , here's an example. public override IDictionary<string, Func<BaseSettings>> GetAvailablePresets() { var basePresets = base.GetAvailablePresets(); // include the 'Default' preset that MCM provides basePresets.Add(\"Reverse\", () => new CustomSettings() { Property1 = false, Property2 = true }); basePresets.Add(\"False\", () => new CustomSettings() { Property1 = false, Property2 = false }); basePresets.Add(\"True\", () => new CustomSettings() { Property1 = true, Property2 = true }); return basePresets; } Fluent API var builder = BaseSettingsBuilder.Create(\"Testing_v1\", \"Testing Fluent API Presets\")! ... .CreatePreset(\"Test\", presetBuilder => presetBuilder .SetPropertyValue(\"prop_1\", true) .SetPropertyValue(\"prop_2\", 2) .SetPropertyValue(\"prop_3\", 1.5F) .SetPropertyValue(\"prop_4\", \"HueHueHue\")); Localization Attribute API Both property Name and HintText support game's localization system, this means that you can use such code [SettingPropertyBool(\"{=DvfsSDF}Property Sample\", HintText = \"{=DnfhFD}Sample Hint Text.\")] [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\")] You also can use the localization system for nested groups! [SettingPropertyGroup(\"{=JFgbsdg}Group Sample\\{=GDgsdfj}Nested Group Sample\")] INotifyPropertyChanged The settings implement the INotifyPropertyChanged interface. MCM subscribes to it and will refresh the UI if any value has changed. MCM will also trigger PropertyChanged event when the setting are saved by providing BaseSettings.SaveTriggered constant with value SAVE_TRIGGERED . IRef IRef is an interface that acts as a link to the actual values that classes like Fluent Builder uses. MCMv4 has several implementations: PropertyRef - links to an actual property ( PropertyRef(PropertyInfo propInfo, object instance) ). ProxyRef<T> - links to get/set actions ( ProxyRef(Func<T> getter, Action<T>? setter) ) that will set/return whatever you want. StorageRef - holds a value within itself. Defining Settings Check this page for using the Attribute definition Check this page for using the Fluent Builder Example of Settings definition Warning In MCMv4, the default settings provider is none , this means that your settings won't be saved to disk unless you override Settings.FormatType ! Attribute API internal sealed class MCMUISettings : AttributeGlobalSettings<MCMUISettings> // AttributePerSaveSettings<MCMUISettings> { private bool _useStandardOptionScreen = false; public override string Id => \"MCMUI_v3\"; public override string DisplayName => $\"MCM UI Impl. {typeof(MCMUISettings).Assembly.GetName().Version.ToString(3)}\"; public override string FolderName => \"MCM\"; public override string FormatType => \"json2\"; [SettingPropertyBool(\"Use Standard Option Screen\", Order = 1, RequireRestart = false, HintText = \"Use standard Options screen instead of using an external.\")] [SettingPropertyGroup(\"General\")] public bool UseStandardOptionScreen { get => _useStandardOptionScreen; set { if (_useStandardOptionScreen != value) { _useStandardOptionScreen = value; OnPropertyChanged(); } } } } Fluent API bool _boolValue = false; int _intValue = 1; float _floatValue = 0f; string _stringValue = \"\"; var builder = BaseSettingsBuilder.Create(\"Testing_Global_v4\", \"MCMv4 Testing Fluent Settings\")! .SetFormat(\"xml\") .SetFolderName(string.Empty) .SetSubFolder(string.Empty) .CreateGroup(\"Testing 1\", groupBuilder => groupBuilder .AddBool(\"prop_1\", \"Check Box\", new ProxyRef<bool>(() => _boolValue, o => _boolValue = o), boolBuilder => boolBuilder .SetHintText(\"Test\") .SetRequireRestart(false))) .CreateGroup(\"Testing 2\", groupBuilder => groupBuilder .AddInteger(\"prop_2\", \"Integer\", 0, 10, new ProxyRef<int>(() => _intValue, o => _intValue = o), integerBuilder => integerBuilder .SetHintText(\"Testing\")) .AddFloatingInteger(\"prop_3\", \"Floating Integer\", 0, 10, new ProxyRef<float>(() => _floatValue, o => _floatValue = o), floatingBuilder => floatingBuilder .SetRequireRestart(true) .SetHintText(\"Test\"))) .CreateGroup(\"Testing 3\", groupBuilder => groupBuilder .AddText(\"prop_4\", \"Test\", new ProxyRef<string>(() => _stringValue, o => _stringValue = o), null)) .CreatePreset(\"Test\", presetBuilder => presetBuilder .SetPropertyValue(\"prop_1\", true) .SetPropertyValue(\"prop_2\", 2) .SetPropertyValue(\"prop_3\", 1.5F) .SetPropertyValue(\"prop_4\", \"HueHueHue\")); var globalSettings = builder.BuildAsGlobal(); globalSettings.Register(); globalSettings.Unregister(); var perSaveSettings = builder.BuildAsPerSave(); perSaveSettings.Register(); perSaveSettings.Unregister(); Translating MCM Just create a module and include in the module folder root folders ModuleData/Languages and include the translations of the following files: sta_strings.xml The game will load them automatically! Migrating from v3 Check this page ! Notes Settings.Instance is available after OnSubModuleLoad , so the earliest you can use it is inside OnBeforeInitialModuleScreenSetAsRoot"
  },
  "articles/MCMv4/mcmv4-attributes.html": {
    "href": "articles/MCMv4/mcmv4-attributes.html",
    "title": "v1 | MCM Documentation",
    "keywords": "Each setting you want to add to the menu has to be marked with an attribute. You can additionally group settings by adding the SettingPropertyGroup attribute. '/' is used as the default separator. Right now, the mod provides these types in the setting menu: Bool Int Slider / Textbox Float Slider / Textbox Textbox Dropdown v1 With v1 of the API, SettingProperty has multiple constructors, each designed for the specific value it represents. Bool [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int [SettingProperty(\"Setting Name\", minValue: 0, maxValue: 10, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 5; Float [SettingProperty(\"Setting Name\", minValue: 0f, maxValue: 0.5f, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public float SettingVariableName { get; set; } = 0.2f; String [SettingProperty(\"Setting Name\", RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; v2 With v2 of the API, there's multiple types of setting properties to make using them less confusing, and the settings can also be ordered by indexing them. It's also possible to format the display of the numerical values for the int and float sliders. Bool ( SettingPropertyBool ) [SettingPropertyBool(\"Setting Name\", Order = 0, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = true; Int ( SettingPropertyInteger ) // Value is displayed as \"X Denars\" [SettingPropertyInteger(\"Setting Name\", 0, 100, \"0 Denars\", Order = 1, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public int SettingVariableName { get; set; } = 25; Float ( SettingPropertyFloatingInteger ) // Value is displayed as a percentage [SettingPropertyFloatingInteger(\"Setting Name\", 0f, 1f, \"#0%\", Order = 2, RequireRestart = false, HintText = \"Setting explanation.\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public bool SettingVariableName { get; set; } = 0.75; String ( SettingPropertyText ) // Value is displayed as a percentage [SettingPropertyText(\"Setting Name\", Order = 3, RequireRestart = false, HintText = \"Setting Explanation\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public string SettingVariableName { get; set; } = \"The textbox data is here\"; To understand how to format the strings take a look at this page for information and examples (specifically the ToString version). Dropdown ( SettingPropertyDropdown ) [SettingPropertyDropdown(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DropdownDefault <string> SettingVariableName { get; set; } = new DropdownDefault <string>(new string[] { \"Test1\", \"Test2\", \"Test3\" }, 0); It can also use custom classes. Don't forget to override .ToString()! [SettingPropertyDropdown(\"Setting Name\")] [SettingPropertyGroup(\"Main Group Name/Nested Group Name/Second Nested Group Name\")] public DropdownDefault <CustomObject> SettingVariableName { get; set; } = new DropdownDefault <CustomObject>(new CustomObject[] { new CustomObject(\"Test1\"), new CustomObject(\"Test2\"), new CustomObject(\"Test3\") }, 0); public class CustomObject { private readonly string _value; public CustomObject(string value) => _value = value; public override string ToString() => _value; }"
  },
  "articles/MCMv4/mcmv4-fluent-builder.html": {
    "href": "articles/MCMv4/mcmv4-fluent-builder.html",
    "title": "Overview | MCM Documentation",
    "keywords": "Overview Fluent Builder gives the ability to create Settings at runtime. This can be useful for mod specific sections that should not be displayed if the mod is not loaded. MCM provides the builder interface ISettingsBuilder and a default implementation @\"MCM.Abstractions.FluentBuilder.Implementation.DefaultSettingsBuilder?text=DefaultSettingsBuilder\". Any property is set by a Set%PropertyName% method. CreateGroup creates a property group where you can define your properties. The default Group name is 'Misc'. Use teh action delegate to configure the property group. AddBool creates a Bool property. AddInteger creates an Integer Slider property. AddFloatingInteger creates an Float Slider property. AddText creates an Textbox property. AddDropdown creates a Dropdown property. AddCustom can add a custom property. The custom property should implement one of the interfaces defined in MCM.Abstractions.Settings.Definitions namespace. Currently there is no way of defining a custom UI Control. One of the possible fixes would be to use UIExtender library. CreatePreset creates a new Preset. SetPropertyValue sets an existing property value. BuildAsGlobal returns a Global setting instance. Use Register and Unregister for MCM to use it. BuildAsPerCharacter returns a PerCharacter setting instance. Use Register and Unregister for MCM to use it. The registered settings will be cleared before and after player joins the campaign, so do the register thing when the campaign was already joined in. Example TrainingTweak - mimics the standard MCM Global Settings flow."
  },
  "articles/MCMv4/mcmv4-migrating-from-mcmv3.html": {
    "href": "articles/MCMv4/mcmv4-migrating-from-mcmv3.html",
    "title": "Notable changes: | MCM Documentation",
    "keywords": "Notable changes: MCMv4 depends on Bannerlord.Harmony, Bannerlord.ButterLib and Bannerlord.UIExtenderEx. Dropped MCM's dependency injection abstraction in favor of Microsoft.DependencyInjection that ButterLib provides. Added support for MCMv3 FluentAPI now supports Presets. PerCharacter settings are replaced by PerSave. They are stored in the save file itself. When MCM is removed, the save file will still be playable. Basically, they do not brick the saves. BaseSettings.Format was renamed to BaseSettings.FormatType. Added new field BaseSettings.DiscoveryType that replaces BaseSettings.Discoverer. Removed BaseSettings.GetSettingPropertyGroups and BaseSettings.GetUnsortedSettingPropertyGroups. Use BaseSettingsExtensions. Fluent settings are not stored in the AppDomain dictionary anymore SettingPropertyGroupAttribute.IsMainToggle is mooved to SettingPropertyBoolAttribute.IsToggle Added a second json formatter json2 that serializes the dropdown as an integer instead of a structure with SelectedIndex property Added a settings screen for ButterLib"
  },
  "articles/MCMv4/mcmv4-soft-dependency.html": {
    "href": "articles/MCMv4/mcmv4-soft-dependency.html",
    "title": "| MCM Documentation",
    "keywords": "MCMv4 has no issues with it being used as a soft dependency. Mod Developers are required to include the MCMv4.dll library inside their /bin folder. MCMv4.dll now includes the implementation details, so it can now Load/Save settings without the Standalone module. The Standalone module is now used to provide the UI implementation of MCMv4. You don't need it if the settings are changed only programmatically. Example of usage: The recommended approach is to define a provider interface and depending on certain conditions, switch bewteen them either at the constructor stage or dynamically. Here is the final settings class that switches between the providers at the constructor stage: public class CustomSettings { private ICustomSettingsProvider _provider; public bool OverrideSomething { get => _provider.OverrideSomething; set => _provider.OverrideSomething = value; } public Settings() { if (CustomSettings.Instance is not null) { _provider = CustomSettings.Instance; } // CustomSettings.Instance will return null if something unexpected happened. else { _provider = new HardcodedCustomSettings(); } } } Here is the provider interface definition and two implementations - one that uses MCM and a custom one that has some hardcoded values. public interface ICustomSettingsProvider { bool OverrideSomething { get; set; } } public class HardcodedCustomSettings : ICustomSettingsProvider { public bool OverrideSomething { get; set; } = true; } public class CustomSettings : AttributeGlobalSettings<CustomSettings>, ICustomSettingsProvider { private bool _overrideSomething = true; public override string Id { get; } = \"CustomSettings_v1\"; public override string DisplayName => TextObjectHelper.Create(\"{=CustomSettings_Name}Custom {VERSION}\", new Dictionary<string, TextObject> { { \"VERSION\", TextObjectHelper.Create(typeof(CustomSettings).Assembly.GetName().Version.ToString(3)) } }).ToString(); public override string FolderName { get; } = \"Custom\"; public override string FormatType { get; } = \"json2\"; [SettingPropertyBool(\"{=CustomSettings_Override}Override Ssomething\", RequireRestart = true, HintText = \"{=CustomSettings_OverrideDesc}If set, does something.\")] [SettingPropertyGroup(\"{=CustomSettings_General}General\")] public bool OverrideSomething { get => _overrideSomething; set { if (_overrideSomething != value) { _overrideSomething = value; OnPropertyChanged(); } } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "| MCM Documentation",
    "keywords": "AKA MBOptionScreen Standalone. Previously, a fork of ModLib that was de-forked. MCM is a Mod Options screen library designed to let modders use its API for defining the options. It can also display settings from other API's like ModLib, pre 1.3 and post 1.3, MBOv1/MCMv2, by using the compatibility layer modules. MCM supports two setting types - Global and PerSave. Global are shared across characters and saves, PerSave are stored within the save file! It provides 5 types of options: Bool Int Slider / Textbox Float Slider / Textbox Textbox Dropdown The settings can be defined at compile time by using the Attribute API and at runtime by using the Fluent Builder."
  }
}